:Class PresentAPL
⍝ Creates a stand-alone HTML file that acts as a presentation in every modern browser.\\
⍝ ## Work flow
⍝ 1. Create a parameter space:\\
⍝    `parms←#.PresentAPL.CreateParms`
⍝ 2. Specify the input file:\\
⍝    `parms.inputFilename←'foo.md'`
⍝ 3. Convert the Markdown file and create the HTML file:\\
⍝    `#.PresentAPL.MakePresentation parms'\\
⍝ `parms.outputFilename` tells you the name of the output file if not set by yourself.
⍝ It defaults to the name and location of the input file with a different extension:
⍝ "html" rather than "md".\\
⍝ ## Details
⍝ The resulting HTML file can be viewed with any browser and behaves like a slide show as
⍝ long as JavaScript is enabled.\\
⍝ If the `standalone` parameter is 1 (that's the default) then the CSS and JavaScript are
⍝ injected into the resulting HTML file, making this HTML page effectively stand-alone.\\
⍝ The CSS is just a suggestion and can be changed by a user, therefore it is kept
⍝ in a file which can be edited or replaced.\\
⍝ The JavaScript is much less likely to need modification. It is therefore not kept in a file.
⍝ See `GetJavascript`.\\
⍝ ## Traps
⍝ Note that the level-1 header must not contain a `<` character. If it would the HTML would
⍝ not render at all.\\
⍝ License: <http://creativecommons.org/licenses/LGPL/2.1/>\\
⍝ Author Kai Jaeger <https://www.linkedin.com/in/kaijaeger>\\
⍝ Homepage: <https://github.com/aplteam/PresentAPL>

    ⎕IO←1 ⋄ ⎕ML←1

    ∇ r←Version
      :Access Public Shared
      r←'PresentAPL' '2.6.0.72' '2019-06-27'
    ∇

    ∇ History
      :Access Public Shared
      ⍝ * 2.6.0
      ⍝   * `QLX` function added to script
      ⍝\\
      ⍝ For information regarding older versions see <https://github.com/aplteam/PresentAPL/releases>
    ∇

    ∇ Qlx;args;ff;files;file;report;msg;problems;⎕TRAP;parms;Ini;home
      :Access Public Shared
      {}AllowRide_⍣0⊣4599 1
      #.⎕SHADOW'Errorparms'
      #.ErrorParms←#.HandleError.CreateParms
      #.ErrorParms.customFns←(⍕⎕THIS),'.TellProblem'
      ⎕TRAP←#.HandleError.SetTrap'#.ErrorParms'
      #.FilesAndDirs.PolishCurrentDir
      args←2 ⎕NQ'#' 'GetCommandLineArgs'
      home←1⊃⎕NPARTS 1⊃args
      files←1↓args
      files←('.md'∘≡¨⎕C ¯3↑¨files)/files
      :If 0∊⍴files
          'ff'⎕WC'MsgBox'('Style' 'Error')('Caption' 'PresentAPL')('Btns' 'OK')('Text' 'No Markdown file specified')
          ⎕DQ'ff'
          OFF 1
      :Else
          report←''
          :If #.FilesAndDirs.Exists home,'\PresentAPL.ini'
              Ini←⎕NEW #.IniFiles(,⊂home,'\PresentAPL.ini')
          :ElseIf #.FilesAndDirs.Exists home,'\PresentAPL.ini'
              Ini←⎕NEW #.IniFiles home,'\PresentAPL.ini'
          :Else
              Ini←⍬
          :EndIf
          :For file :In files
              :If Ini≡⍬
                  parms←#.PresentAPL.CreateParms
                  parms.inputFilename←file
                  parms.outputFilename←(¯3↓file),'.html'
                  :If #.APLTreeUtils2.IsDevelopment
                      parms.cssURL←⊃⎕NPARTS #.FilesAndDirs.PWD,'\'
                  :Else
                      parms.cssURL←⊃#.APLTreeUtils2.SplitPath⊃args
                  :EndIf
              :Else
                  parms←'flat'Ini.Convert ⎕NS''
                  parms.inputFilename←file
                  parms.homeFolder←¯1
                  parms.base←''
                  parms.bookmarkMayStartWithDigit←1
                  parms←AddDefaultParms parms
              :EndIf
              :If 0≠≢problems←#.PresentAPL.MakePresentationFromFile parms
                  report,←(⊂'*** Problems:'),'  '∘,¨problems
              :EndIf
              report,←⊂file
          :EndFor
          msg←(⊂(⍕⍴report),' presentation',((1<⍴report)/'s'),' created: '),'  '∘,¨(¯2↓¨report),¨⊂'html'
          'ff'⎕WC'MsgBox'('Style' 'Info')('Btns' 'OK')('Text'msg)
          ⎕DQ'ff'
          OFF 0
      :EndIf
    ∇

    ∇ report←MakePresentationFromFile parms;md;pres;main;ns;title;html
      :Access Public Shared
      parms.bookmarkLink←0
      parms.linkToCSS←~parms.standalone
      parms.screenCSS←parms.css
      parms.printCSS←''
      md←⊃⎕NGET parms.inputFilename
      :If 0∊⍴parms.outputFilename
          parms.outputFilename←(⊃'.'#.APLTreeUtils2.SplitPath parms.inputFilename),'html'
      :ElseIf (¯1↑parms.outputFilename)∊'/\'
          parms.outputFilename,←2⊃#.APLTreeUtils2.SplitPath(⊃'.'#.APLTreeUtils2.SplitPath parms.inputFilename),'html'
      :EndIf
      parms(GetParmsFromMarkdown)←md
      pres←SplitMarkdown md
      pres.∆slide_00←CheckTitle pres.∆slide_00
      main←pres.⍎⊃↓'∆'pres.⎕NL 2
      ns←##.MarkAPL.Init parms main
      ns←##.MarkAPL.Process ns
      title←⊃ns.headers[1;3]
      ns.data,⍨←⊂'title'('"',title,'"')  ⍝ Make it the first so that the user can overwrite it if she wishes
      report←ns.report
      html←CreateTopOfHTML_Page title ns.data parms
      html,←⊂'<div class="slides">'
      html,←ns MakeSlides pres
      html,←⊂'</div>'
      (⊂,html)⎕NPUT parms.outputFilename 1
     ⍝Done
    ∇

    ∇ (html ns)←MakePresentationFromMarkdown(markdown parms);pres;main;title;html
      :Access Public Shared
      parms.bookmarkLink←0
      parms.linkToCSS←~parms.standalone
      parms.screenCSS←parms.css
      parms.printCSS←''
      parms(GetParmsFromMarkdown)←markdown
      pres←SplitMarkdown markdown
      main←pres.⍎⊃↓'∆'pres.⎕NL 2
      ns←##.MarkAPL.Init parms main
      ns←##.MarkAPL.Process ns
      title←⊃ns.headers[1;3]
      ns.data,⍨←⊂'title'('"',title,'"')  ⍝ Make it the first so that the user can overwrite it if she wishes
      html←CreateTopOfHTML_Page title ns.data parms
      html,←⊂'<div class="slides">'
      html,←ns MakeSlides pres
      html,←⊂'</div>'
     ⍝Done
    ∇

    ∇ r←CreateParms
      :Access Public Shared
      r←##.MarkAPL.CreateParms
      r.⎕EX¨'linkToCSS' 'screenCSS' 'printCSS'
      r.base←''
      r.homeFolder←¯1
      r.verbose←1                   ⍝ 1=We need to check the results.
      r.standalone←1                ⍝ 1=Inject CSS into the resulting HTML file, making it stand-alone.
      r.cssURL←⊃#.APLTreeUtils2.SplitPath ⎕WSID     ⍝ That's where we expect to find the CSS file.
      r.css←'PresentAPL_Blue.css'   ⍝ The default theme.
      r.checkFootnotes←0            ⍝ Don't change this: not suitable for presentations.
      r.subTocs←0                   ⍝ Don't change this: not suitable for presentations.
      r.bookmarkLink←0              ⍝ Don't change this: not suitable for presentations.
      r.ignoreEmbeddedParms←0
      r.title←'PresentAPL'
      r.printReportToSession←0
      r.bookmarkMayStartWithDigit←1
      r.⎕FX'r←∆List;⎕IO' '⍝ List all variables and possible references in this namespace' '⎕IO←1' 'r←{⍵,[1.5]⍎¨⍵}⎕NL-2 9'
    ∇

    ∇ r←GetCodeBlocks html;hits
      :Access Public Shared
    ⍝ Returns the code found in <pre><code> blocks. Every block is an item. An item might have
    ⍝ several sub items, depending on the number of lines of the code block in question.
      html←1↓⊃,/(⎕UCS 13),¨html
      :If ~0∊⍴hits←'<pre\b[^>]*><code\b[^>]*>'⎕S 0(⍠'Mode' 'D')⊣html
          r←((⍳⍴html)∊hits)⊂html
          r←{'<pre\b[^>]*><code\b[^>]*>'⎕R''⊣⍵}¨r
          r←1↓¨({'</code></pre>'⎕S 0⍠('Mode' 'D')⊣⍵}¨r)↑¨r
          r←(⎕UCS 13)#.APLTreeUtils2.Split¨r
      :EndIf
    ∇

    ∇ r←no CheckSlide ns;co;res;ex;b
      :Access Public Shared
      co←GetCodeBlocks ns.html       ⍝ Code
      res←{0::'' ⋄ ⍎¨⍵}¨co           ⍝ results
      ex←2⊃¨ns.data                  ⍝ Expected
      b←res≢¨{2=≡⍵:,⊂⍵ ⋄ ⍵}ex
      :If 1∊b
          r←'Check code block(s): '
          r,←,↑{⍺,',',⍵}/↑¨b/ns.data
          r←'' '<p style="color:red;background-color:white;padding:3px;">'r'</p>' ''
      :Else
          r←''
      :EndIf
    ∇

    ∇ {r}←TellProblem parms;∆
      :Access Public Shared
      r←⍬
      ∆←''
      ∆,←⊂'Caption' 'PresentAPL Problem'
      ∆,←⊂'Style' 'Error'
      ∆,←⊂'Btns' 'OK'
      ∆,←⊂'Text'(↑parms.LastError)
      'ff'⎕WC(⊂'MsgBox'),∆
      ⎕DQ'ff'
      :If #.APLTreeUtils2.IsDevelopment
          →
      :Else
          ⎕OFF
      :EndIf
    ∇

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Private stuff

    ∇ html←mainNs MakeSlides presentation;slides;i;slide;ns
      html←''
      slides←1↓'∆'pres.⎕NL 2
      :For i :In ⍳⊃⍴slides
          slide←presentation.⍎'∆slide_',¯2↑'0',⍕i
          (⊃slide)←1↓⊃slide
          ns←##.MarkAPL.Init parms slide
          ns←##.MarkAPL.Process ns
          :If ~0∊⍴ns.report
              :If mainNs.parms.printReportToSession
                  ⎕←'*** Problem in slide ;',⍕i
                  ⎕←⍪' ',¨ns.report
              :EndIf
              mainNs.report,←ns.report
          :EndIf
          html,←(⊂'<div class="slide">'),ns.html,(⊂'</div>')
      :EndFor
    ∇

    ∇ r←SplitMarkdown md;bool;buff;data;first;noOf
      r←⎕NS''
      bool←('## '∘≡¨3↑¨md)∨'# '∘≡¨2↑¨md
      :If 0=1⍴bool
          noOf←¯1+bool⍳1
          data←md[1+'\[data\]:'⎕S 2⍠('Greedy' 0)('Mode' 'L')('IC' 1)⊣noOf↑md]           ⍝ Get all "leading" `[data]:`
          (noOf↑md)←noOf↑'\[data\]:.*$'⎕R''⍠('Greedy' 0)('Mode' 'L')('IC' 1)⊣noOf↑md    ⍝ Remove them from the markdown
      :Else
          data←''
      :EndIf
      buff←bool⊂md
      :If ~0=≢data
          first←1⊃buff
          first←(1⍴first),data,1↓first                                    ⍝ Inject the `[data]` stuff into first slide
          (1⊃buff)←first
      :EndIf
      buff r.{⍎'∆slide_',(¯2↑'00',(⍕⍵)),'←⍺'}¨¯1+⍳⍴buff
    ⍝Done
    ∇


    ∇ r←ConvertData2Meta meta;id;value
      r←⍬
      :For id value :In meta
          r,←⊂'<meta name="',id,'" content="',(⍕value),'" />'
      :EndFor
    ∇

    ∇ html←CreateTopOfHTML_Page(title metaData parms)
      html←''
      html,←⊂'<!DOCTYPE html>'
      html,←⊂'<html>'
      html,←⊂'<head>'
      html,←⊂'<meta charset="utf-8">'
      html,←InjectMetaData metaData
      html,←InjectCSS parms
      html,←InjectJavaScript parms
      html,←⊂''
      :If 0∊⍴title
          html,←⊂'<title>MarkAPL</title>'
      :Else
          html,←⊂'<title>',title,'</title>'
      :EndIf
      html,←⊂'<!-- statusbar -->'
      html,←⊂'<div id="statusbar">'
      html,←⊂'<span style="float:right;">'
      html,←⊂'<span style="margin-right:1em;"><span id="slideidx"></span> of {$slidecount}</span>'
      html,←⊂'<button id="homebutton" title="first slide">1</button>'
      html,←⊂'<button id="prevslidebutton" title="previous slide">&laquo;</button>'
      html,←⊂'<button id="previtembutton" title="previous item">&lsaquo;</button>'
      html,←⊂'<button id="nextitembutton" title="next item">&rsaquo;</button>'
      html,←⊂'<button id="nextslidebutton" title="next slide">&raquo;</button>'
      html,←⊂'<button id="endbutton" title="last slide">{$slidecount}</button>'
      html,←⊂'<select id="tocbox"></select>'
      html,←⊂'</span>'
      html,←⊂'<span id="eos">&#10145;</span>'
      html,←⊂'<span id="sbtitle">{$title}</span>'
      html,←⊂'</div>'
      html←,¨html
    ∇


    ∇ parms←parms GetParmsFromMarkdown markdown;bool;buff
      :If 0<+/bool←'[parm]:'∘{⍺≡⎕C(⍴⍺)↑⍵}¨markdown
          buff←(⍴'[parm]:')↓¨bool⌿markdown
          buff←↑'='#.APLTreeUtils2.Split¨buff
          buff[;2]←#.APLTreeUtils2.DLB #.APLTreeUtils2.DTB buff[;2]
          parms.{⍎(1⊃⍵),'←',⍕2⊃⍵}¨↓buff
      :EndIf
    ∇

    ∇ html←InjectMetaData metaData;id;content
      html←''
      :For id content :In metaData
          html,←⊂'<meta name="',id,'" content="',(content~'"'),'" />'
      :EndFor
    ∇

    ∇ {r}←InjectCSS parms;fn;list;file;css
      :If parms.standalone
          :Trap 22
              css←⊃⎕NGET({0∊⍴⍵:⍵ ⋄ ⍵,'\'}parms.cssURL),parms.css
          :Else
              css←⊃⎕NGET({0∊⍴⍵:⍵ ⋄ ⍵,'\'}parms.cssURL),'\Files\',parms.css
          :EndTrap
          css←##.MarkAPL.CompressCSS css
          r←'<style>'css'</style>'
      :Else
          r←⊂'<link rel="stylesheet" type="text/css" href="',parms.cssURL,parms.css,'" /> '
      :EndIf
    ∇

    ∇ {r}←InjectJavaScript parms
      r←(⊂'<script>'),(GetJavaScript ⍬),(⊂'</script>')
      :If 0         ⍝ We have decided that the JavaScript comes from within the PresentAPL class.
          :If parms.standalone
              :Trap 22
                  r←(⊂'<script>'),(⊃⎕NGET parms.cssURL,'\PresentAPL.js'),⊂'</script>'
              :Else
                  r←(⊂'<script>'),(⊃⎕NGET parms.URL,'\Files\PresentAPL.js'),⊂'</script>'
              :EndTrap
          :Else
              r←⊂'<script src="PresentAPL.js" type="text/javascript"> </script>'
          :EndIf
      :EndIf
    ∇

      CheckTitle←{
          html←⍵
          blockNo←1+' {0,3}\# '⎕S 2⍠('Greedy' 0)('Mode' 'L')⊣html
          (blockNo⊃html)~←'<'
          html
      }

      GetJavaScript←{
          r←''
          r,←⊂'/*   This work is licensed under Creative Commons GNU LGPL License.'
          r,←⊂''
          r,←⊂'    Originated as "slideous.js"'
          r,←⊂'    '
          r,←⊂' License: http://creativecommons.org/licenses/LGPL/2.1/'
          r,←⊂''
          r,←⊂' Author:  Stefan Goessner/2005-2006'
          r,←⊂' Web:     http://goessner.net/ '
          r,←⊂' '
          r,←⊂' Enhanced to "PresentAPL" by Kai Jaeger ⋄ APL Team Ltd 2016'
          r,←⊂'*/'
          r,←⊂'var Slideous = {'
          r,←⊂'   version: 1.0,'
          r,←⊂'   // == user customisable ==='
          r,←⊂'   clickables: { a: true, button: true, img: true, input: true, object: true, textarea: true, select: true, option: true },'
          r,←⊂'   incrementables: { '
          r,←⊂'                     blockquote: { filter: "self, parent" }, '
          r,←⊂'                     dd: { filter: "self, parent" },'
          r,←⊂'                     dt: { filter: "self, parent" },'
          r,←⊂'                     h2: { filter: "self, parent" },'
          r,←⊂'                     h3: { filter: "self, parent" },'
          r,←⊂'                     h4: { filter: "self, parent" },'
          r,←⊂'                     h5: { filter: "self, parent" },'
          r,←⊂'                     h6: { filter: "self, parent" },'
          r,←⊂'                     li: { filter: "self, parent" },'
          r,←⊂'                     p: { filter: "self" }, '
          r,←⊂'                     pre: { filter: "self" }, '
          r,←⊂'                     img: { filter: "self, parent" }, '
          r,←⊂'                     hr: { filter: "self, parent" },'
          r,←⊂'                     object: { filter: "self, parent" },'
          r,←⊂'                     table: { filter: "self, parent" },'
          r,←⊂'                   },'
          r,←⊂'   autoincrementables: { ol:true, ul:true, dl:true, p:true, pre:true, h3:true, h4:true, h5:true, h6:true, img:true, table:true, blockquote:true, object:true, hr:true},'
          r,←⊂'   autoincrement: true,'
          r,←⊂'   statusbar: true,'
          r,←⊂'   navbuttons: { contentbutton:   function(){Slideous.gotoslide(Slideous.tocidx(), true, true);},'
          r,←⊂'                 homebutton:      function(){Slideous.gotoslide(1, true, true);},'
          r,←⊂'                 prevslidebutton: function(){Slideous.previous(false);},'
          r,←⊂'                 previtembutton:  function(){Slideous.previous(true);},'
          r,←⊂'                 nextitembutton:  function(){Slideous.next(true);},'
          r,←⊂'                 nextslidebutton: function(){Slideous.next(false);},'
          r,←⊂'                 endbutton:       function(){Slideous.gotoslide(Slideous.count,true,true);} },'
          r,←⊂'   fontsize: 125,  // in percent, corresponding to body.font-size in css file'
          r,←⊂'   fontdelta: 5,   // increase/decrease fontsize by this value'
          r,←⊂'   mousesensitive: false,'
          r,←⊂'   tocidx: 0,'
          r,←⊂'   tocitems: { toc: "<li><a href=\"#s{\$slideidx}\">{\$slidetitle}</a></li>",'
          r,←⊂'               tocbox: "<option value=\"#s{\$slideidx}\" title=\"{\$slidetitle}\">{\$slidetitle}</option>" },'
          r,←⊂'   keydown: function(evt) {'
          r,←⊂'      evt = evt || window.event;'
          r,←⊂'      var key = evt.keyCode || evt.which;'
          r,←⊂'      if (key && !evt.ctrlKey && !evt.altKey) {'
          r,←⊂'         switch (key) {'
          r,←⊂'            case 33: // page up  ... previous slide'
          r,←⊂'               Slideous.previous(false); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 37: // left arrow ... previous item'
          r,←⊂'               Slideous.previous(true); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 32: // space bar'
          r,←⊂'            case 39: // right arrow'
          r,←⊂'               Slideous.next(true); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 13: // carriage return  ... next slide'
          r,←⊂'            case 34: // page down'
          r,←⊂'               Slideous.next(false); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 35: // end  ... last slide (not recognised by opera)'
          r,←⊂'               Slideous.gotoslide(Slideous.count, true, true); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 36: // home ... first sssslide (not recognised by opera)'
          r,←⊂'               Slideous.gotoslide(1, true, true); evt.cancel = !Slideous.showall; break;'
          r,←⊂'            case 65: // A ... show All'
          r,←⊂'            case 80: // P ... Print mode'
          r,←⊂'               Slideous.toggleshowall(!Slideous.showall); evt.cancel = true; break;'
          r,←⊂'            case 67: // C ... goto contents'
          r,←⊂'               Slideous.gotoslide(Slideous.tocidx, true, true); evt.cancel = true; break;'
          r,←⊂'            case 77: // M ... toggle mouse sensitivity'
          r,←⊂'               Slideous.mousenavigation(Slideous.mousesensitive = !Slideous.mousesensitive); evt.cancel = true; break;'
          r,←⊂'            case 83: // S ... toggle statusbar'
          r,←⊂'               Slideous.togglestatusbar(); evt.cancel = true; break;'
          r,←⊂'            case 61:  // + ... increase fontsize'
          r,←⊂'            default: break;'
          r,←⊂'         }'
          r,←⊂'         if (evt.cancel) evt.returnValue = false;'
          r,←⊂'      }'
          r,←⊂'      return !evt.cancel;'
          r,←⊂'   },'
          r,←⊂''
          r,←⊂'   // == program logic ==='
          r,←⊂'   count: 0,                       // # of slides ..'
          r,←⊂'   curidx: 0,                      // current slide index ..'
          r,←⊂'   mousedownpos: null,             // last mouse down position ..'
          r,←⊂'   contentselected: false,         // indicates content selection ..'
          r,←⊂'   showall: true,'
          r,←⊂'   init: function() {'
          r,←⊂'      Slideous.curidx = 1;'
          r,←⊂'      Slideous.importproperties();'
          r,←⊂'      Slideous.registerslides();'
          r,←⊂'      document.body.innerHTML = Slideous.injectproperties(document.body.innerHTML);'
          r,←⊂'      Slideous.buildtocs();'
          r,←⊂'      Slideous.registeranchors();'
          r,←⊂'      Slideous.toggleshowall(false);'
          r,←⊂'      Slideous.updatestatus();'
          r,←⊂'      document.body.style.fontSize = Slideous.fontsize+"%";'
          r,←⊂'      document.getElementById("s1").style.display = "block";'
          r,←⊂'      document.onkeydown = Slideous.keydown;'
          r,←⊂'      Slideous.mousenavigation(Slideous.mousesensitive);'
          r,←⊂'      Slideous.registerbuttons();'
          r,←⊂'      if (window.location.hash)'
          r,←⊂'         Slideous.gotoslide(window.location.hash.substr(2), true, true);'
          r,←⊂'   },'
          r,←⊂'   registerslides: function() {'
          r,←⊂'      var div = document.getElementsByTagName("div");'
          r,←⊂'      Slideous.count = 0;'
          r,←⊂'      for (var i in div)'
          r,←⊂'         if (Slideous.hasclass(div[i], "slide"))'
          r,←⊂'            div[i].setAttribute("id", "s"+(++Slideous.count));'
          r,←⊂'   },'
          r,←⊂'   registeranchors: function() {'
          r,←⊂'      var a = document.getElementsByTagName("a"),'
          r,←⊂'          loc = (window.location.hostname+window.location.pathname).replace(/\\/g, "/");'
          r,←⊂'      for (var i in a) {'
          r,←⊂'         if (a[i].href && a[i].href.indexOf(loc) >= 0 && a[i].href.lastIndexOf("#") >= 0) {'
          r,←⊂'            a[i].href = "javascript:Slideous.gotoslide(" + a[i].href.substr(a[i].href.lastIndexOf("#")+2)+",true,true)";'
          r,←⊂'         }'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   registerbuttons: function() {'
          r,←⊂'      var button;'
          r,←⊂'      for (var b in Slideous.navbuttons)'
          r,←⊂'         if (button = document.getElementById(b))'
          r,←⊂'            button.onclick = Slideous.navbuttons[b];'
          r,←⊂'   },'
          r,←⊂'   importproperties: function() {  // from html meta section ..'
          r,←⊂'      var meta = document.getElementsByTagName("meta"), elem;'
          r,←⊂'      for (var i in meta)'
          r,←⊂'         if (meta[i].attributes && meta[i].attributes["name"] && meta[i].attributes["name"].value in Slideous)'
          r,←⊂'            switch (typeof(Slideous[meta[i].attributes["name"].value])) {'
          r,←⊂'               case "number": Slideous[meta[i].attributes["name"].value] = parseInt(meta[i].attributes["content"].value); break;'
          r,←⊂'               case "boolean": Slideous[meta[i].attributes["name"].value] = meta[i].attributes["content"].value == "true" ? true : false; break;'
          r,←⊂'               default: Slideous[meta[i].attributes["name"].value] = meta[i].attributes["content"].value; break;'
          r,←⊂'            }'
          r,←⊂'   },'
          r,←⊂'   injectproperties: function(str) {'
          r,←⊂'      var meta = document.getElementsByTagName("meta"), elem;'
          r,←⊂'      for (var i in meta) {'
          r,←⊂'         if (meta[i].attributes && meta[i].attributes["name"])'
          r,←⊂'            str = str.replace(new RegExp("{\\$"+meta[i].attributes["name"].value+"}","g"), meta[i].attributes["content"].value);'
          r,←⊂'      }'
          r,←⊂'      return str = str.replace(/{\$generator}/g, "Slideous")'
          r,←⊂'                      .replace(/{\$version}/g, Slideous.version)'
          r,←⊂'                      .replace(/{\$title}/g, document.title)'
          r,←⊂'                      .replace(/{\$slidecount}/g, Slideous.count);'
          r,←⊂'   },'
          r,←⊂'   buildtocs: function() {'
          r,←⊂'      var toc = document.getElementById("toc"), list = "",'
          r,←⊂'          tocbox = document.getElementById("tocbox");'
          r,←⊂'      if (toc) {'
          r,←⊂'         for (var i=0; i<Slideous.count; i++)'
          r,←⊂'            list += Slideous.tocitems.toc.replace(/{\$slideidx}/g, i+1).replace(/{\$slidetitle}/, document.getElementById("s"+(i+1)).getElementsByTagName("h1")[0].innerHTML);'
          r,←⊂'         toc.innerHTML = list;'
          r,←⊂'         while (toc && !Slideous.hasclass(toc, "slide")) toc = toc.parentNode;'
          r,←⊂'         if (toc) Slideous.tocidx = toc.getAttribute("id").substr(1);'
          r,←⊂'      }'
          r,←⊂'      if (tocbox) {'
          r,←⊂'         tocbox.innerHTML = "";'
          r,←⊂'         for (var i=0; i<Slideous.count; i++)'
          r,←⊂'            tocbox.options[tocbox.length] = new Option((i+1)+". "+document.getElementById("s"+(i+1)).getElementsByTagName("h1")[0].innerHTML, "#s"+(i+1));'
          r,←⊂'         tocbox.onchange = function() { Slideous.gotoslide(this.selectedIndex+1, true, true); };'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   next: function(deep) {'
          r,←⊂'      if (!Slideous.showall) {'
          r,←⊂'         var slide = document.getElementById("s"+Slideous.curidx),'
          r,←⊂'             item = Slideous.firstitem(slide, Slideous.isitemhidden);'
          r,←⊂'         if (deep) {  // next item'
          r,←⊂'            if (item)'
          r,←⊂'               Slideous.displayitem(item, true);'
          r,←⊂'            else'
          r,←⊂'               Slideous.gotoslide(Slideous.curidx+1, false, false);'
          r,←⊂'         }'
          r,←⊂'         else if (item)  // complete slide ..'
          r,←⊂'            while (item = Slideous.firstitem(slide, Slideous.isitemhidden))'
          r,←⊂'               Slideous.displayitem(item, true);'
          r,←⊂'         else           // next slide'
          r,←⊂'            Slideous.gotoslide(Slideous.curidx+1, true, false);'
          r,←⊂'         Slideous.updatestatus();'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   previous: function(deep) {'
          r,←⊂'      if (!Slideous.showall) {'
          r,←⊂'         var slide = document.getElementById("s"+Slideous.curidx);'
          r,←⊂'         if (deep) {'
          r,←⊂'            var item = Slideous.lastitem(slide, Slideous.isitemvisible);'
          r,←⊂'            if (item)'
          r,←⊂'               Slideous.displayitem(item, false);'
          r,←⊂'            else'
          r,←⊂'               Slideous.gotoslide(Slideous.curidx-1, true, false);'
          r,←⊂'         }'
          r,←⊂'         else'
          r,←⊂'            Slideous.gotoslide(Slideous.curidx-1, true, false);'
          r,←⊂'         Slideous.updatestatus();'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   gotoslide: function(i, showitems, updatestatus) {'
          r,←⊂'      if (!Slideous.showall && i > 0 && i <= Slideous.count && i != Slideous.curidx) {'
          r,←⊂'         document.getElementById("s"+Slideous.curidx).style.display = "none";'
          r,←⊂'         var slide = document.getElementById("s"+(Slideous.curidx=i)), item;'
          r,←⊂'         while (item = Slideous.firstitem(slide, showitems ? Slideous.isitemhidden : Slideous.isitemvisible))'
          r,←⊂'            Slideous.displayitem(item, showitems);'
          r,←⊂'         slide.style.display = "block";'
          r,←⊂'         if (updatestatus)'
          r,←⊂'            Slideous.updatestatus();'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   firstitem: function(root, filter) {'
          r,←⊂'      var found = filter(root);'
          r,←⊂'      for (var node=root.firstChild; node!=null && !found; node = node.nextSibling)'
          r,←⊂'         found = Slideous.firstitem(node, filter);'
          r,←⊂'      return found;'
          r,←⊂'   },'
          r,←⊂'   lastitem: function(root, filter) {'
          r,←⊂'      var found = null;'
          r,←⊂'      for (var node=root.lastChild; node!=null && !found; node = node.previousSibling)'
          r,←⊂'         found = Slideous.lastitem(node, filter);'
          r,←⊂'      return found || filter(root);'
          r,←⊂'   },'
          r,←⊂'   isitem: function(node, visible) {'
          r,←⊂'      var nodename;'
          r,←⊂'      return node && node.nodeType == 1   // elements only ..'
          r,←⊂'          && (nodename=node.nodeName.toLowerCase()) in Slideous.incrementables'
          r,←⊂'          && (   Slideous.incrementables[nodename].filter.match("\\bself\\b")'
          r,←⊂'          && (Slideous.hasclass(node, "incremental")'
          r,←⊂'              || (Slideous.autoincrement && nodename in Slideous.autoincrementables))'
          r,←⊂'              || Slideous.incrementables[nodename].filter.match("\\bparent\\b") && (Slideous.hasclass(node.parentNode, "incremental")'
          r,←⊂'              || (Slideous.autoincrement && node.parentNode.nodeName.toLowerCase() in Slideous.autoincrementables))'
          r,←⊂'              || Slideous.incrementables[nodename].filter.match("\\bgrandparent\\b") && (Slideous.hasclass(node.parentNode.parentNode, "incremental")'
          r,←⊂'              || (Slideous.autoincrement && node.parentNode.parentNode.nodeName.toLowerCase() in Slideous.autoincrementables))'
          r,←⊂'             )'
          r,←⊂'          && (visible ? (node.style.visibility != "hidden")'
          r,←⊂'                      : (node.style.visibility == "hidden"))'
          r,←⊂'          ? node : null;'
          r,←⊂'   },'
          r,←⊂'   isitemvisible: function(node) { return Slideous.isitem(node, true); },'
          r,←⊂'   isitemhidden: function(node) { return Slideous.isitem(node, false); },'
          r,←⊂'   displayitem: function(item, show) {'
          r,←⊂'      if (item) item.style.visibility = (show ? "visible" : "hidden");'
          r,←⊂'   },'
          r,←⊂'   updatestatus: function() {'
          r,←⊂'      if (Slideous.statusbar) {'
          r,←⊂'         var eos = document.getElementById("eos"), '
          r,←⊂'             idx = document.getElementById("slideidx"),'
          r,←⊂'             tocbox = document.getElementById("tocbox");'
          r,←⊂'         if (eos) '
          r,←⊂'            eos.style.visibility = Slideous.firstitem(document.getElementById("s"+Slideous.curidx), Slideous.isitemhidden) != null'
          r,←⊂'                                 ? "visible" : "hidden";'
          r,←⊂'         if (idx) '
          r,←⊂'            idx.innerHTML = Slideous.curidx;'
          r,←⊂'         if (tocbox)'
          r,←⊂'            tocbox.selectedIndex = Slideous.curidx-1;'
          r,←⊂'      }'
          r,←⊂'   },'
          r,←⊂'   togglestatusbar: function() {'
          r,←⊂'      document.getElementById("statusbar").style.display = (Slideous.statusbar = !Slideous.statusbar) ? "block" : "none";'
          r,←⊂'   },'
          r,←⊂'   toggleshowall: function(showall) {'
          r,←⊂'      var slide, item;'
          r,←⊂'      for (var i=0; i<Slideous.count; i++) {'
          r,←⊂'         slide = document.getElementById("s"+(i+1));'
          r,←⊂'         slide.style.display = showall ? "block" : "none";'
          r,←⊂'         while (item = Slideous.firstitem(slide, showall ? Slideous.isitemhidden : Slideous.isitemvisible)) '
          r,←⊂'            Slideous.displayitem(item, showall);'
          r,←⊂'         var divs = slide.getElementsByTagName("div");'
          r,←⊂'         for (var j in divs)'
          r,←⊂'            if (Slideous.hasclass(divs[j], "handout"))'
          r,←⊂'               divs[j].style.display = showall ? "block" : "none";'
          r,←⊂'      }'
          r,←⊂'      if (!showall)'
          r,←⊂'         document.getElementById("s"+Slideous.curidx).style.display = "block";'
          r,←⊂'      if (Slideous.statusbar) '
          r,←⊂'         document.getElementById("statusbar").style.display = showall ? "none" : "block";'
          r,←⊂'      Slideous.showall = showall;'
          r,←⊂'   },'
          r,←⊂'   hasclass: function(elem, classname) {'
          r,←⊂'      var classattr = null;'
          r,←⊂'      return (classattr=(elem.attributes && elem.attributes["class"])) '
          r,←⊂'          && classattr.nodeValue.match("\\b"+classname+"\\b");'
          r,←⊂'   },'
          r,←⊂'   selectedcontent: function() {'
          r,←⊂'      return window.getSelection ? window.getSelection().toString() '
          r,←⊂'                                 : document.getSelection ? document.getSelection() '
          r,←⊂'                                                         : document.selection ? document.selection.createRange().text'
          r,←⊂'                                                                              : "";'
          r,←⊂'   },'
          r,←⊂'   mousenavigation: function(on) {'
          r,←⊂'      if (on) {'
          r,←⊂'         document.onmousedown = Slideous.mousedown;'
          r,←⊂'         document.onmouseup = Slideous.mouseup;'
          r,←⊂'      }'
          r,←⊂'      else'
          r,←⊂'         document.onmousedown = document.onmouseup = null;'
          r,←⊂'   },'
          r,←⊂'   mousepos: function(e) {'
          r,←⊂'      return e.pageX ? {x: e.pageX, y: e.pageY} '
          r,←⊂'                     : {x: e.x+document.body.scrollLeft, y: e.y+document.body.scrollTop};'
          r,←⊂'   },'
          r,←⊂'   mousedown: function(evt) {'
          r,←⊂'      evt = evt||window.event;'
          r,←⊂'      Slideous.mousedownpos = Slideous.mousepos(evt);'
          r,←⊂'      Slideous.contentselected = !!Slideous.selectedcontent() || ((evt.target || evt.srcElement).nodeName.toLowerCase() in Slideous.clickables);'
          r,←⊂'      return true;'
          r,←⊂'   },'
          r,←⊂'   mouseup: function(evt) {'
          r,←⊂'      evt = evt||window.event;'
          r,←⊂'      var pos = Slideous.mousepos(evt);'
          r,←⊂'      if (pos.x == Slideous.mousedownpos.x && pos.y == Slideous.mousedownpos.y && !Slideous.contentselected) {'
          r,←⊂'         Slideous.next(true);'
          r,←⊂'         return evt.returnValue = !(evt.cancel = true);'
          r,←⊂'      }'
          r,←⊂'      return false;'
          r,←⊂'   }'
          r,←⊂'};'
          r,←⊂'window.onload = Slideous.init;'
          r,←⊂''
          r
      }

    ∇ {r}←AllowRide n;rc;port;wait
      :If 0=IsConnectedToRide ⍬
          :If n.∆INI.Exist'Ride' 'Allow'
          :AndIf n.∆INI.Exist'Ride' 'Port'
          :AndIf ↑n.∆INI.Get'Ride' 'Allow'
              port←↑n.∆INI.Get'Ride' 'Port'
              wait←{0=n.∆INI.Exist'Ride' 'Wait':0 ⋄ ↑n.∆INI.Get'Ride' 'Wait'}⍬
              AllowRide_ port wait
          :EndIf
      :EndIf
    ∇

    ∇ {r}←AllowRide_(port waitFlag);rc
      r←⍬
      :If 0=IsConnectedToRide ⍬
          :If 0=≢##.FilesAndDirs.Dir'conga??_32.dll'
              OFF 106 ⍝ means:                    "Conga DLL is missing"
          :Else
              {}3502⌶0
              rc←3502⌶'Serve::',⍕port
              :If rc≠0
                  11 ⎕SIGNAL⍨'Ride error when resetting connection string to "',('Serve::',⍕port)'"; RC=',⍕rc
              :EndIf
              rc←3502⌶1
              :If ~rc∊0 ¯1
                  :If 64≠rc
                      11 ⎕SIGNAL'Another application seems to use port ',⍕port
                  :Else
                      11 ⎕SIGNAL⍨'Ride error when trying to activate Ride; RC=',⍕rc
                  :EndIf
              :EndIf
              {}{_←⎕DL ⍵ ⋄ ∇ ⍵}⍣(⊃waitFlag)⊣1     ⍝ Endless loop that allows us to have a RIDE and wait for an interrupt
          :EndIf
      :EndIf
      :If #.APLTreeUtils2.IsDevelopment
          →
      :Else
          ⎕OFF rc
      :EndIf
    ∇

    IsConnectedToRide←{3501⌶⊣⍬}

    ∇ OFF rc
      :If #.APLTreeUtils2.IsDevelopment
          →
      :Else
          ⎕OFF rc
      :EndIf
    ∇

    ∇ parms←AddDefaultParms parms;defaults;bool;list;buff
      defaults←CreateParms
      list←#.APLTreeUtils2.DMB↓defaults.⎕NL 2
      :If 0<+/bool←~list∊#.APLTreeUtils2.DMB↓parms.⎕NL 2
          buff←defaults.{⍵(⍎⍵)}¨bool/list
          parms.{⍎(1⊃⍵),'←2⊃⍵'}¨buff
      :EndIf
    ∇

:EndClass
