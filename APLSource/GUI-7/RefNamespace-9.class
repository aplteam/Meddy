:Class RefNamespace ⍝
⍝ The only method of this class returns a namespace that is prepared to
⍝ collect references pointing to GUI controls.
⍝
⍝ The namespace is populated with a couple of methods useful to investigate
⍝ the namespace:
⍝ * The `∆List` method returns all or some (depending on the right argument)
⍝   of the references together with its "Type" & "Caption" (if applicable),
⍝   and one can restrict the references returned by specifying one or more
⍝   types as right argument rather than just an empty vector.
⍝ * The `∆GetRefs` method returns all references in the namespace if the
⍝   right argument is empty. You can specify one or more "Type"s to
⍝   restrict the list.
⍝ * `∆GetVersion` returns name, version number and version date.
⍝ * `∆GetMethods` returns a nested list with the names of all methods.
⍝
⍝ Kai Jaeger ⋄ APL Team Ltd
    ⎕IO←0 ⋄ ⎕ml←3

    ∇ n←Create displayName
      :Access Public Shared
    ⍝ Creates an unnamed namespace and populates it with some functions.\\
    ⍝ The names of those functions start with a `∆` character.\\
    ⍝ This namespace is designed to collect all the references used
    ⍝ by/for a particular GUI like a standard form (`StdForm`).\\
    ⍝ The right argument is used for `⎕DF` if not empty.
      :Access Public Shared
      n←⎕NS⊃'∆List' '∆GetRefs' '∆GetMethods'
      :If ~0∊⍴displayName
          n.⎕DF'[',({⍵↓⍨2×'#.'≡2↑⍵}¯1↓0⊃'.'##.##.APLTreeUtils.SplitPath 1⊃⎕XSI),':',displayName,']'
      :EndIf
    ∇

      ∆List←{
    ⍝ List all controls with their ⍵ and caption (if any)
    ⍝ ⍵ is "type"
    ⍝ ⍺ defaults to 2 for variables. That means that you can suppress all vars by specifying ¯1.
    ⍝ If "type" is empty, all controls are listed.
    ⍝ if "type" is not empty then only controls are listed of that "type".
    ⍝ "type" can be either a simple string or a vector of strings.
          ⍺←2
          vars←⎕NL-⍺
          refs←⎕NL-9
          r←⊃{(⊂⍵)∊'∆globalParms' '∆parms' '∆g' 'menubar':⍵'Vars' ⋄ rf←⍎⍵ ⋄ (⊂⍵),(⊂rf.⎕WG'Type'),(⊂{0::'' ⋄ ⍵.Caption}rf)}¨refs
          r{(0∊⍴⍵):⍺ ⋄ ⍺,[0](⍪⍵),((⍴⍵),2)⍴'Vars' ''}←vars
          (0∊⍴⍵):r
          types←{0 1∊⍨≡⍵:,⊂,⍵ ⋄ ⍵}⍵
          0∊⍴r←(r[;1]∊types)⌿r:r
          r[;0]←⍎¨r[;0]
          r
      }

    ∇ refs←∆GetRefs type;parent;bool;labels
    ⍝ Returns all references in ⎕THIS pointing to what has a "Type" property.
    ⍝ If the right argument is empty, all refs found are returend.
    ⍝ if "type" is not empty then only references of that "type" are listed.
    ⍝ Note that "type" means control types, not `Input` types. Therefore it
    ⍝ is "Edit" rather than "Notepad".
    ⍝ "type" can be either a simple string or a vector of strings.
      refs←⍎¨⎕NL-9
      refs←({6::0 ⋄ 1⊣⍵.Type}¨refs)/refs
      :If 9=⎕NC'∆g'        ⍝ "Input" has a ∆g sub-namepsace
          parent←(↑↑⎕RSI).##
      :AndIf ∨/bool←∆g.defMat[;##.##.Enums.DefMatIndices.DataType]=##.##.Enums.InputDataTypes.Label
    ⍝ Multiple labels are saved as a vector on a variable. We have t convert them to refs in order
    ⍝ to add them the the result of this function.
          labels←bool⌿∆g.defMat[;##.##.Enums.DefMatIndices.ControlName]
          refs,←↑,/⍎¨labels
      :EndIf
      :If ~0∊⍴type
          type←{(,∘⊂∘,⍣(1=≡,⍵))⍵}type
          refs/⍨←refs.Type∊type
      :EndIf
    ∇

    ∇ r←∆GetMethods
    ⍝ Returns a list with all methods.
    ⍝ Those are recognized by naming convention: their names start with a ∆ char.
      r←'∆'⎕NL-3
    ∇

:EndClass
