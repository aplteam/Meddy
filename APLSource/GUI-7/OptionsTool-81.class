:Class OptionsTool
⍝ This class is designed to present a list of options to the user.
⍝ By default it's a list of radio buttons but it may by a list of check boxes
⍝ as well. The list is supposed to be small: scrolling is not offered.\\
⍝ For large lists (or tables) use `SelectionTool` instead.\\
⍝ Author: Kai Jaeger ⋄ Copyright: APL Team Ltd


    :Include ##.APLTreeUtils
    :Include APLGuiUtils

    ⎕IO←0 ⋄ ⎕ml←3

    :Field Public Shared ReadOnly RefreshEvent←9999
    :Field Public Shared ReadOnly QuitEvent←9998

    ∇ r←ListHelpers
      :Access Public Shared
      r←↑'Run' ''
    ∇

    ∇ n←{x}Create options;∆;parms2;_;globalParms;parms;parmsMenubar
    ⍝ Takes one mandatory parameter:\\
    ⍝ `options` is a vector of text vectors (vtv). These are the options.\\
    ⍝ Accepts also one or two optional parameters:\\
    ⍝ `globalParms` see `#.AppleGuiParms.CreateDefaults`\\
    ⍝ `parms` is typically created via `CreateParms`.\\
    ⍝ Returns a namespace with references to all the controls created. The
    ⍝ form lives as long as that namespace exists if no other refs were
    ⍝ created later.
      :Access Public Shared
      x←{(0<⎕NC ⍵):⍎⍵ ⋄ ⍬}'x'
      (globalParms parms)←CreateParms GetParms x
      parms←CheckParmsForProgressbarAndStatusbar parms
      'Invalid: style'⎕SIGNAL APLGuiError/⍨~(⊂Lowercase parms.style)∊##.Enums.OptionsStyles.(radio check)
      parms2←CopyNamespace parms
      parms2.(fontAPL fontInput fontLabel fontStandard)←parms.(fontAPL fontInput fontLabel fontStandard)
      parms2.(sysMenu maxButton minButton sizeable)←1
      parms2.parmType←'StdForm'
      n←##.StdForm.Create globalParms parms2
      n.∆Form.⎕WS'Event'QuitEvent 1
      n.∆Form.onClose←'OnClose'
      parmsMenubar←##.Menubar.CreateParms
      parmsMenubar.noDevelopersMenu←1
      n.menubar←##.Menubar.Create n.∆Form(GetListMenu ##.Enums.OptionsStyles.check≡parms.style)parmsMenubar(⎕NEW ##.KeyCodes)
      n.menubar.⎕DF'[Menubar namespace]'
      n(CreateInfo)←parms.info
      n←##.StdForm.AddButtons(n('OK' 'Cancel'))
      n.∆buttons.onSelect←⊂'OnButtonPressed'
      n(CreateOptions)←options parms2
      {⎕NQ ⍵ RefreshEvent}¨n.Options
      n.Options[0].## AdjustSize n
      n←PositionButtons n
      n←CreateProgressbarTimerAndMessage n
      n(CreateAutoPressTimer)←parms.timeout
      n.∆Form ##.APLGuiHelpers.CenterIn globalParms.centerIn{0∊⍴⍵:⍺ ⋄ ⍵}parms.centerIn
      {}CheckPosition n.∆Form
     ⍝Done
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Returns a parameter namespace with default settings.
    ⍝ | Parameter name     | Comments |
    ⍝ |-|-|
    ⍝ | `addToCaption`     | Together with the "caption" this is used to compile the caption|
    ⍝ | `alignButtons`     | Defaults to `##.Enums.Align.Left`. Can be "center" or "right" instead. Overwrites global parameter if not empty.|
    ⍝ | `autoPress`        | Defines the button that is clicked in test mode (`0`=OK, `1`=Cancel, `3`=Help, `¯1`=no button at all).|
    ⍝ | `caption`          | This overwrites any setting of "caption" in the global parameter set.|
    ⍝ | `centerIn`         | A form the new form shall be centered in.|
    ⍝ | `default`          | Which items shall be preselected from the start. Boolean or Integer(s).|
    ⍝ | `destroyAutoPressTimerHotKey` | Which key allows the user to stop the timer. Defaults to F12|
    ⍝ | `fontAPL`          | Font to be used for displaying APL code.|
    ⍝ | `fontInput`        | Font to be used for any input field.|
    ⍝ | `fontLabel`        | Font to be used for lables.|
    ⍝ | `fontStandard`     | Font to be used for any other purposes than "fontAPL", "fontInput" and "fontLabel".|
    ⍝ | `hasStatusbar`     | Boolean that decides whether the form will have a status bar or not. Defaults to 1.|
    ⍝ | `hasVersionField`  | Reserve a field in the bottom right corner for version info.|
    ⍝ | `hGap`             | Horizontal gap. Defaults to the value of `hGap` in the global parameter space.|
    ⍝ | `icon`             | Default is an empty vector. Might become either an icon object or a `*.ico` filename. The latter one must be prefixed by "file://".|
    ⍝ | `info`             | If specified this string is shown above the list.|
    ⍝ | `initialVgap`      | The space between the top border of the Form and the first control. Defaults to 3 times the vGap.|
    ⍝ | `minSize`          | Defaults to 200 300. Use this to specify the minimum size of the resulting Form. If controls demand a bigger size anyway, `minSize` has no effect.|
    ⍝ | `parent`           | If specified this must point to a form that will be the parent of the dialog to be created.|
    ⍝ | `parmType`         | Is "SelectionTool"; defines the type of this parameter space.|
    ⍝ | `posn`             | Posn of the form.|
    ⍝ | `regKey2`          | If this is non-empty it it used to save "Posn" & "Size" for the Form. Set to `¯1` if `regKey2` should become `addToCaption`. `''` means: don't save (default).|
    ⍝ | `size`             | Size of the form.|
    ⍝ | `statusbarMessage` | If you want an initial message in the status bar set this.|
    ⍝ | `style`            | How many rows may the user select: "single" or "multi". Set to "multi" in case checkboxes=1.|
    ⍝ | `testMode`         | Defaults to `¯1`. This will become `globals.testmode` if its not overwritten.|
    ⍝ | `timeout`          | Boolean that defaults to 0. 1 means that the "autoPress" button is "pressed" after "timeout" seconds.|
    ⍝ | `useWindowsRegistry` | If this is one then "Posn" & "Size" are saved/loaded in/from the Windows Registry.|
    ⍝ | `vGap`             | Vertical gap. Defaults to the value of `vGap` in the global parameter space.|
      r←##.APLGuiParameterSpace.Create
      r.addToCaption←''
      r.alignButtons←##.Enums.Align.Left
      r.autoPress←¯1
      r.caption←''
      r.centerIn←''
      r.default←¯1
      r.destroyAutoPressTimerHotKey←'F12'
      r.(fontAPL fontInput fontLabel fontStandard)←⊂''
      r.hasProgressbar←1
      r.hasStatusbar←1
      r.hasVersionField←0
      r.hGap←¯1
      r.icon←''
      r.info←''
      r.initialVgap←¯1
      r.minSize←200 300
      r.parent←''
      r.parmType←'OptionTool'
      r.posn←⍬ ⍬
      r.regKey2←''
      r.size←⍬ ⍬
      r.statusbarMessage←''
      r.style←##.Enums.OptionsStyles.radio
      r.testMode←¯1
      r.timeout←0
      r.useWindowsRegistry←0
      r.vGap←¯1
      ⍝Done
    ∇

    ∇ (okFlag bool)←{x}Run options;n
    ⍝ Creates a Form, hands over control to user and returns result.\\
    ⍝ `okFlag` is 1 for the "OK" button and 0 otherwise
      :Access Public Shared
      x←{(0<⎕NC ⍵):⍎⍵ ⋄ ⍬}'x'
      n←x Create options
      (okFlag bool)←ModalWait n
    ∇

    ∇ (okFlag boolean)←ModalWait n;ind
      :Access Public Shared
    ⍝ Takes a ref pointing to a form created by this class.\\
    ⍝ Returns:
    ⍝ | Name | Meaning |
    ⍝ |-|-|
    ⍝ | `okFlag`  | 1 in case the "OK" button was pressed and 0 otherwise.
    ⍝ | `boolean` | a vector of Booleans representing the selection.
    ⍝ `0=+/boolean` holds true in case `okFlag` is 0.
      :Access Public Shared
      okFlag←0 ⋄ boolean←n.Options.State×0
      ind←¯1↑0,Where n.Options.State
      {}⎕NQ(ind⊃n.Options)'GotFocus' ⋄ ⎕DQ n.∆Form
      :If 0=n.∆Form.∆closed
          :If n.∆buttonPressed.Default
              okFlag←1
              boolean←n.Options.State
          :EndIf
          n.∆CloseForm
      :EndIf
    ∇

⍝⍝⍝⍝ Private stuff

      OnKeyPressInOptions←{
          n←GetRefTo_n 0⊃⍵
          (rf key shiftState)←⍵[0 4 5]
          (~key∊36 38 35 40 32):1  ⍝ Not up,down,home,end, blank?!
          _←⎕NQ(0⊃⍵)RefreshEvent
          (key=36):0⊣GoToHome rf n
          (key=35):0⊣GoToEnd rf n
          (key=38):0⊣AddLines ¯1 rf n
          (key=40):0⊣AddLines 1 rf n
          (key=32):n ToggleCurrentItem rf
          . ⍝ Huuh?!
      }

    ∇ r←n OnRefreshEvent msg;sh;no;rf
      ⍝ Refresh selection info in the status bar
      r←⍬
      :If 0<n.⎕NC'Statusbar'
          no←+/n.Options.State
          sh←⍴n.Options
          :If 0=no
              n.StatusField1.Text←'None of ',(⍕sh),' option',((1<sh)/'s'),' is selected'
          :ElseIf no=1
              n.StatusField1.Text←'1 option of ',(⍕sh),' is selected'
          :Else
              n.StatusField1.Text←(⍕no),' option',((1<no)/'s'),' of ',(⍕sh)
              n.StatusField1.Text,←((1<no)⊃,' is' ' are'),' selected'
          :EndIf
      :EndIf
    ∇

    ∇ n←n CreateInfo info;∆
      :Access Public Shared
      :If 1<≡info
          n.Info←AddLabels n info
      :ElseIf '⋄'∊info
          info←'⋄'Split info
          n.Info←AddLabels n info
      :Else
          ∆←''
          ∆,←⊂'Caption'info
          ∆,←⊂'Posn'(n.(∆initialVgap ∆Hgap))
          ∆,←⊂'Size'((0∊⍴info)⊃(⍬(1⊃n.∆Form.GetTextSize'W',info,'W'))(0 0))
          ∆,←⊂'Attach'(4⍴'Top' 'Left')
          n.Info←n.∆Form.⎕NEW'Label'∆
          n.Info.⎕DF'[Label]:Info'
      :EndIf
    ∇

    ∇ r←AddLabels(n labels);∆;rf;label;caption;startAt
    ⍝ Returns a vector with refs pointing to all labels created.
      r←⍬
      startAt←n.(∆initialVgap ∆Hgap)
      :For caption :In labels
          ∆←''
          ∆,←⊂'Font'(n GetParm ##.Enums.Fonts.Label)
          ∆,←⊂'Posn'startAt
          ∆,←⊂'Caption'caption
          ∆,←⊂'Attach'(4⍴'Top' 'Left')
          label←n.∆Form.⎕NEW'Label'∆
          r,←label
          startAt[0]+←label.Size[0]-6
      :EndFor
    ∇

    ∇ n←n CreateOptions(options parms);∆;posn;_;this;i;Else;height
      :Access Public Shared
      ∆←''
      posn←(GetPosnOfOptions n)
      ∆,←⊂'Posn'posn
      ∆,←⊂'Attach'('Top' 'Left' 'Top' 'Left')
      ∆,←⊂'Font'parms.fontLabel
      :If 0=n.⎕NC'Statusbar'
          height←0
      :Else
          height←n.Statusbar.Size[0]
      :EndIf
      ∆,←⊂'Size'(n.∆Form.Size[0]-(posn[0]+height+0⊃↑n.∆buttons.Size)(2×n.∆Hgap))
      n.Group←n.∆Form.⎕NEW'Group'∆
      n.Group.⎕DF'[Group]:Group'
      i←0
      n.Options←⍬
      :For this :In options
          ∆←''
          ∆,←⊂'Style'n.∆parms.style
          ∆,←⊂'Caption'(this,' ')
          ∆,←⊂'Attach'(4⍴'Top' 'Left')
          n.Options,←n.Group.⎕NEW'Button'∆
          n.Options[i].Posn←(n.∆Vgap+i×n.Options[i].Size[0]),n.∆Hgap
          i+←1
      :EndFor
      2 ⎕NQ n.Group'Configure',n.Group.Posn,((↑n.Options).Posn[0]+0⊃+⌿⊃(↑¯1↑n.Options).(Posn Size)),20+(2×n.∆Hgap)+⌈/1⊃¨n.Options.Size
      n.Options.Event←⊂RefreshEvent'OnRefreshEvent'n
      n.Options.onKeyPress←⊂'OnKeyPressInOptions'
      :If 'radio'≡n.∆parms.style
          :If 1<+/n.∆parms.default
              'You cannot (pre-)select more than one item for radio buttons'⎕SIGNAL APLGuiError
          :EndIf
          :If n.∆parms.default≡¯1
              n.Options.State←(⍴n.Options.State)↑1
          :Else
              n.Options.State←(⍴n.Options.State)↑parms.default
          :EndIf
      :Else
          :If ¯1≢n.∆parms.default
              :If 1=⍴,n.∆parms.default
                  n.∆parms.default←(⍴options)⍴n.∆parms.default
              :EndIf
              'Number of options and length of "default" do not match'⎕SIGNAL APLGuiError/⍨(~0∊⍴n.∆parms.default)∧(⍴,n.∆parms.default)≠⍴,options
              n.Options.State←n.∆parms.default
          :EndIf
      :EndIf
      :If 'check'≡n.∆parms.style
          n.menubar.selectAll.onSelect←'OnSelectAll'n
          n.menubar.selectNone.onSelect←'OnSelectNone'n
          n.menubar.invertSelection.onSelect←'OnInvertSelection'n
      :EndIf
    ∇

      GetPosnOfOptions←{
          n←⍵
          (0∊⍴⊃n.∆parms.info):n.(∆initialVgap ∆Hgap)
          ps←n.Info.(Posn Size)
          2=≡ps:(n.∆Vgap+⌈/↑+⌿⊃ps),n.∆Hgap
          (n.∆Vgap+⌈/↑¨+⌿¨⊃¨ps),n.∆Hgap
      }

    ∇ {r}←AdjustSizeAndPosn n;needed;posn
      ⍝ Adjusts the size of the form.
      needed←CalcNeededSize n
      .  ⍝TODO⍝       posn←⌈((2×n.∆parms.vGap)+0.5×##.APLGuiHelpers.ScreenEstate[0]-needed[0]),n.∆Form.Posn[1]
      {}2 ⎕NQ n.∆Form'Configure',posn,needed
      r←⍬
    ∇

      ToggleCurrentItem←{
          rf←⍵
          n←⍺
          n.∆parms.style≡'radio':⍬
          rf.State←~rf.State
          ⍬
      }

    ∇ r←GetListMenu multipleFlag;this
      :Access Public Shared
      :If multipleFlag
          r←''
          r,←⊂'[Edit]                       {edit}'
          this←⍕⎕THIS
          r,←⊂' Select all=Ctrl+A           {selectAll}         ;Select all items'
          r,←⊂' Select none=Ctrl+N          {selectNone}        ;De-select all items'
          r,←⊂' Invert selection=Ctrl+I     {invertSelection}   ;Invert the selection'
          r,←⊂' -'
      :Else
          r←''
      :EndIf
    ∇

    :Section UsedByMenubarClass

    ∇ n OnSelectAll msg;_
      ⎕NQ n.∆Form RefreshEvent
      :If 'Check'≡n.Options[1].Style
          n.Options.State←1
      :EndIf
    ∇

    ∇ n OnSelectNone msg;_
      ⎕NQ n.∆Form RefreshEvent
      :If 'Check'≡n.Options[1].Style
          n.Options.State←0
      :EndIf
    ∇

    ∇ n OnInvertSelection msg;_
      ⎕NQ n.∆Form RefreshEvent
      :If 'Check'≡n.Options[1].Style
          n.Options.State←~n.Options.State
      :EndIf
    ∇

    :EndSection

    ∇ {r}←ctrl AdjustSize n;needed;corr;fntObj;btns;oldSize
      :Access Public Shared
⍝ "ctrl" must be the "last" control (but the push buttons) on the form.
      r←⍬
      needed←n.(∆initialVgap ∆Hgap)++⌿⊃ctrl.(Posn Size)
      needed[1]⌈←n.Info.Size[1]+n.∆Hgap                     ⍝ Take the "Info" field into account
      needed[1]⌈←n.∆Hgap+1⊃↑↑¯1↑+/¨n.∆buttons.(Posn Size)   ⍝ Take right-most button into account
      corr←(n.∆Vgap×~0∊⍴n.∆parms.info)+RefToWinSys.(GetSystemMetrics SM_CYCAPTION)      ⍝ Menubar ...
      corr+←RefToWinSys.(GetSystemMetrics SM_CYMENU)        ⍝ ... gymnastics.
                                                            ⍝ Let's check the Window caption:
      fntObj←⎕NEW'Font'((⊂¨'PName' 'Weight' 'Size'),¨⊂∘{(' '=1↑0⍴⍵):⍵~⎕UCS 0 ⋄ |⍵}¨RefToWinSys.GetFormCaptionFontInfo[13 4 0])
      btns←RefToWinSys.(GetSystemMetrics SM_CXICON)×1+n.∆Form.(SysMenu+MaxButton+MinButton)
      needed[1]⌈←btns+1⊃n.∆Form.GetTextSize n.∆Form.Caption fntObj
      needed[0]+←corr+(n.∆buttons[0]).Size[0]
      needed⌊←##.APLGuiHelpers.ScreenEstate-(corr+2×n.∆Vgap),0   ⍝ But not more than the size of the screen-20
      oldSize←n.∆Form.Size
      1 ⎕NQ n.∆Form'Configure',n.∆Form.Posn,needed
      n.∆Form.Posn+←(⌊oldSize-n.∆Form.Size)÷2
    ∇

    ∇ r←OnButtonPressed msg;rf;n
      :Access Public Shared
      r←⍬
      n←GetRefTo_n↑msg
      n.∆buttonPressed←↑msg
      ⎕NQ n.∆Form QuitEvent
    ∇

      GoToEnd←{
          (rf n)←⍵
          n.∆parms.style≢##.Enums.OptionsStyles.radio:⍬⊣⎕NQ(↑⌽n.Options)'GotFocus'
          n.Options.State←0
          (↑⌽n.Options).State←1
          ⍬⊣⎕NQ(↑⌽n.Options)'GotFocus'
      }

      GoToHome←{
          (rf n)←⍵
          n.∆parms.style≢##.Enums.OptionsStyles.radio:⍬⊣⎕NQ(↑n.Options)'GotFocus'
          n.Options.State←0
          n.Options[0].State←1
          ⍬⊣⎕NQ(↑n.Options)'GotFocus'
      }

      AddLines←{
          (v btn n)←⍵
          (⍬≡rf←(0⌈(n.Options⍳btn)+v)⊃n.Options,⊂⍬):⍬
          n.∆parms.style≡##.Enums.OptionsStyles.check:⍬⊣⎕NQ rf'GotFocus'
          n.Options.State←0
          rf.State←1
          ⍬⊣⎕NQ rf'GotFocus'
      }

    ∇ OnClose msg;rf;n
      :Access Public Shared
      rf←0⊃msg
      {}##.APLGuiHelpers.SavePosnAndSizeInRegistry rf.n
      rf.n.∆Form.∆closed←1
    ∇

    ∇ n←n CreateAutoPressTimer timeout
      :Access Public Shared
      :If timeout>0
          n←n CreateAutoPressTimer_ timeout
      :EndIf
    ∇

:EndClass
