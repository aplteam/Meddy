:Class StdForm
⍝ The principal function `CreateForm` creates just a form and returns
⍝ a namespace with references pointing to all the controls created as
⍝ part of the form: one or two status fields and a progress bar.
⍝
⍝ `CreateFormParms` creates a namespace populated with default values
⍝ for the possible parameters. You can then set/correct values and
⍝ then pass the namespace as argument to `CreateForm`.
⍝
⍝ There are two methods for dealing with the progress bar:\\
⍝ `IniProgressbar` and `SetProgressbarThumb`\\
⍝ Tabs can be added by calling `AddTabs`.
⍝
⍝ Author: Kai Jaeger ⋄ Copyright: APL Team Ltd

    :Include ##.APLTreeUtils
    :Include APLGuiUtils

    ⎕IO←0 ⋄ ⎕ML←3

    ∇ n←{n}Create x;∆;parms;globalParms;⎕TRAP
    ⍝ Takes two parameters, `globalParms` (see `#.APLGuiGlobalParms.CreateDefaults`)
    ⍝ and `parms`, typically created via `CreateFormParms`.
    ⍝
    ⍝ Note that via the left argument a reference pointing to a namespace can be
    ⍝ specified. This is useful in some rare cases when threads are involved,
    ⍝ see the `Busy` class as an example.
    ⍝
    ⍝ Returns a namespace with references to all the controls created. The
    ⍝ form lives as long as that namespace exists if no other refs were
    ⍝ created later.
      :Access Public Shared
      ⎕TRAP←(APLGuiError'C'('(⎕IO⊃⎕DM) ⎕SIGNAL ',⍕APLGuiError))(0 'N')
      (globalParms parms)←(CreateParms 1)GetParms x
      parms←CheckParmsForProgressbarAndStatusbar parms
      :If 0=⎕NC'n'
          n←##.FormRefNamespace.Create' '~⍨parms.addToCaption
      :EndIf
      n.∆Vgap←GetGap globalParms parms'vGap'
      n.∆Hgap←GetGap globalParms parms'hGap'
      :If ¯1≡parms.initialVgap
          n.∆initialVgap←##.Enums.Globals.InitialVgapMinSize⌈n.∆Vgap
      :Else
          n.∆initialVgap←parms.initialVgap
      :EndIf
      parms.regKey2{(¯1≡parms.regKey2)⊃⍺ ⍵}←{0∊⍴↑⍵:1⊃⍵ ⋄ ↑⍵}parms.(addToCaption caption)
      ∆←''
      ∆,←⊂'Caption'(CompileCaption globalParms parms)
      ∆,←⊂'Posn'parms.posn
      ∆(GetIcon)←(parms globalParms).icon
      ∆,←⊂'Font'(GetFontStandard globalParms parms)
      ∆,←⊂'Coord' 'Pixel'
      ∆,←⊂'SysMenu'parms.sysMenu
      ∆,←⊂'MaxButton'parms.maxButton
      ∆,←⊂'MinButton'parms.minButton
      ∆,←⊂'Sizeable'parms.sizeable
      ∆,←⊂'Size'parms.size
      :If 0<parms.⎕NC'parent'
          :If ~(⊂parms.parent)∊''⍬
              n.∆Form←parms.parent.⎕NEW'Form'∆
          :ElseIf ~(⊂globalParms.parent)∊''⍬
              n.∆Form←globalParms.parent.⎕NEW'Form'∆
          :Else
              n.∆Form←⎕NEW'Form'∆
          :EndIf
      :Else
          n.∆Form←⎕NEW'Form'∆
      :EndIf
      n.∆Form.n←n
      n.∆Form.∆closed←0
      n.∆Form.onClose←'OnCloseForm'
      :If 0<parms.⎕NC'onClose'
      ⍝ Some special dialog boxes might not offer an "onClose".
      :AndIf ~0∊⍴parms.onClose←n CheckCallback parms.onClose
          '"onClose" handler not found '⎕SIGNAL 6/⍨3≠(↑parms.onClose).⎕NC 1⊃parms.onClose
      :EndIf
      {}CorrectSizeAndPosn n parms
      n.(∆globalParms ∆parms)←globalParms parms
      n.∆Form.⎕DF globalParms.caption CompileDisplayFormatString parms
      n.∆Form.⎕WS'Event'##.Enums.Events.QuitDQ 1    ⍝ To end a ⎕DQ/Wait (test cases)
      n←RestorePosnAndSizeFromRegistry n
      n.∆Form{(⍬ ⍬≢⍵):⍺.onConfigure←'OnConfigure'⍵}parms.minSize
      n←##.APLGuiHelpers.CreateStatusbar n
      n←##.APLGuiHelpers.CreateProgressbar n
      :If ⍬ ⍬≡parms.posn
      :OrIf ##.APLGuiHelpers.MonitorInfo{((2↑⍺)∨.>⍵)∨(2↑2↓⍺)∨.<⍵}n.∆Form.Posn
          {}n.∆Form ##.APLGuiHelpers.CenterIn globalParms.centerIn
      :EndIf
     ⍝Done
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Returns a parameter namespace with default settings.
      r←##.APLGuiParameterSpace.Create
      r.addToCaption←''
      r.alignButtons←¯1
      r.caption←''
      r.(fontAPL fontInput fontLabel fontStandard)←⊂''
      r.hasStatusbar←0
      r.hasProgressbar←0
      r.hasVersionField←1
      r.hGap←¯1
      r.icon←''
      r.initialVgap←¯1
      r.maxButton←1
      r.minButton←1
      r.minSize←⍬ ⍬
      r.namePrefix←''
      r.onClose←''
      r.parent←''
      r.parmType←'StdForm'
      r.posn←⍬ ⍬
      r.size←⍬ ⍬
      r.sizeable←1
      r.statusbarMessage←''
      r.sysMenu←1
      r.regKey2←¯1
      r.vGap←¯1
     ⍝Done
    ∇

    ∇ r←OnClose msg
⍝      :Access Public Shared
      r←1
    ∇

    ∇ n←{posn}AddTabs y;n;captions;names;∆;rf;this;i;name
    ⍝ Takes two or three arguments:
    ⍝ 1. The namespace with all the references returned by `Create`.
    ⍝ 2. A vector of text vectors used as captions for the tabs.
    ⍝ 3. (optional): names of the tabs to be created.
    ⍝
    ⍝ The Tab names default to `Tab_{nn}`, for example `Tab_00` for the first one.
    ⍝
    ⍝ Returns the namespace which will have references `Tab_00` and
    ⍝ so on for all the tabs created.
    ⍝
    ⍝ The associated SubForm will be named `Tab_00_SF` etc.
    ⍝
    ⍝ The optional left argument `posn` defaults to 10 0.
    ⍝
    ⍝ If you want have both, buttons and tabs, then call `AddTabs` first.
      :Access Public Shared
      (n captions names)←3↑y,⊂''
      'Add tabs first, and only then buttons'⎕SIGNAL APLGuiError/⍨0<{6::0 ⋄ ⍴⍵.Buttons}n
      posn←{(0<⎕NC ⍵):⍎⍵ ⋄ 10 0}'posn'
      ∆←⊂'Attach'('Top' 'Left' 'Bottom' 'Right')
      ∆,←⊂'TabFocus' 'Never'
      ∆,←⊂'Posn'posn
      ∆,←⊂'Font'(n GetParm ##.Enums.Fonts.Standard)
      rf←⍎'n.',n.∆parms.namePrefix,'TabControl←n.∆Form.⎕NEW''TabControl''∆'
      rf.⎕DF'[TabControl]:',n.∆parms.namePrefix,'TabControl'
      :If n.∆parms.hasStatusbar
          ⍎'n.',n.∆parms.namePrefix,'TabControl.Size[0]←n.∆Form.Size[0]-n.Statusbar.Size[0]+posn[0]'
      :Else
          ⍎'n.',n.∆parms.namePrefix,'TabControl.Size[0]←n.∆Form.Size[0]-posn[0]'
      :EndIf
      n.∆TabButtons←⍬
      n.∆TabSubForms←⍬
      :For i :In ⍳⍴captions
          this←i⊃captions
          ∆←⊂'Caption'this
          :If 0∊⍴names
              name←'Tab_',(¯2↑'00',⍕i)
          :Else
              name←i⊃names
          :EndIf
          ⍎'rf←n.',name,'←n.',n.∆parms.namePrefix,'TabControl.⎕NEW''TabButton'' ∆'
          n.∆TabButtons,←rf
          rf.⎕DF'[TabButton]:',name
          ∆←⊂'TabObj'rf
          ∆,←⊂'3D' 'Dialog'
          ∆,←⊂'Attach'('Top' 'Left' 'Top' 'Left')
          ⍎'rf←n.',name,'_SF','←n.',n.∆parms.namePrefix,'TabControl.⎕NEW''SubForm'' ∆'
          rf.⎕DF'[SubForm]:',name,'_SF'
          n.∆TabSubForms,←rf
      :EndFor
    ∇

    ∇ n←AddButtons(n captions);tc;align
    ⍝ Takes two arguments:
    ⍝ 1. The namespace with all the references returned by `Create`.
    ⍝ 2. A vector of text vectors used as captions for the buttons.
    ⍝
    ⍝ Returns the namespace which will have references `Btn_00` (`namePrefix`
    ⍝ permitted) and so on for all the buttons created.
    ⍝
    ⍝ Note that `('Default' 1)` is added for any button with a caption "OK"
    ⍝ and `('Cancel' 1)` for any button with a caption "Cancel".
    ⍝
    ⍝ Call `APLGuiUtils.PositionButtons` after the Form's size has been adjusted
    ⍝ for any alignments.
      :Access Public Shared
      :If 0<↑⍴tc←¯1 n.∆List'TabControl'
          (↑tc[;0]).Size[0]-←MakeRoomForButtons n
      :EndIf
      n.∆buttons←⍬
      n←AddButton n captions
      :If ~0∊⍴align←n.∆globalParms.alignButtons{¯1≡⍵:⍺ ⋄ 0∊⍴⍵:⍺ ⋄ ⍵}n.∆parms.alignButtons
          n←align PositionButtons n
      :EndIf
    ∇


    ∇ n←AddButton(n captions);i;∆;this;rf;size;name
      size←⍬(⌈/(n∘{1⊃GetSize ⍺((2+⍴⍵)⍴'9')}¨captions))
      :For i :In ⍳⍴,captions
          this←i⊃,captions
          :If (,0)≢,this   ⍝ Now deprecated way to have no such button
          :AndIf ~0∊⍴this
              ∆←⊂'Caption'this
              ∆,←⊂'Size'size
              ∆,←⊂'Attach'(4⍴'Bottom' 'Left')
              name←'Btn_',¯2↑'00',⍕i
              ⍎'rf←n.',name,'←n.∆Form.⎕NEW''Button'' ∆'
              rf.⎕DF'[Button]:',name
              :If this≡'OK'
              :AndIf {(⍬≡⍵):1 ⋄ 0=+/⍵.Default}n.∆buttons
                  rf.Default←1
              :ElseIf this≡'Cancel'
              :AndIf {(⍬≡⍵):1 ⋄ 0=+/⍵.Cancel}n.∆buttons
                  rf.Cancel←1
              :EndIf
              rf.∆buttonPressed←0
              n.∆buttons,←rf
              rf.Posn[0]←n.∆Form.Size[0]-n.∆Vgap+rf.Size[0]+GetStatusbarHeight n
              rf.Posn[1]←i{⍵+⍺×⍵+rf.Size[1]}n.∆Hgap
          :EndIf
      :EndFor
    ∇

    ∇ {r}←InitProgressbar(n total)
   ⍝ Use this to initialize the progress bar.\\
   ⍝ `total` is the number of elements.
      :Access Public Shared
      r←⍬
      :If n.∆parms.hasProgressbar
          n.Progressbar.Visible←1
          n.Progressbar.Limits←1,total
          n.Progressbar.Thumb←1
      :EndIf
    ∇

    ∇ {r}←SetProgressbarThumb(n val);pc
   ⍝ Use this to set either...
   ⍝ * a percentage: for this make `val` negative: specifying
   ⍝   `¯25` is treated as 25%.
   ⍝ * an absolute value: specifying a positive value let the function
   ⍝   calculate the percentage based on `1↑1↓Limits`.
      :Access Public Shared
      r←⍬
      :If ¯1=×val
          n.Progressbar.Thumb←⌊0.5+n.Progressbar.Limits[1]×|val÷100
      :Else
          n.Progressbar.Thumb←val
      :EndIf
      2 ⎕NQ n.Progressbar'Flush'
    ∇

⍝⍝⍝⍝⍝⍝ Private stuff

      MakeRoomForButtons←{
          n←⍵
          (GetStatusbarHeight n)+n.∆Vgap+↑n.∆Form.GetTextSize'W'n.∆Form.FontObj
      }

      GetStatusbarHeight←{
          n←⍵
          (0=n.⎕NC'Statusbar'):0
          ↑n.Statusbar.Size
      }

      GetSize←{
          (n tx)←⍵
          n.∆Form.GetTextSize tx n.∆Form.FontObj
      }

      CorrectSizeAndPosn←{
      ⍝ On a very large monitor, the default size is just too big.
      ⍝ This function sets a max to it, and also corrects the posn if it's not user defined.
          (n parms)←⍵
          s←↑¨⍴¨,¨parms.size                        ⍝ Size
          b←0 0≠s                                   ⍝ Did the user specify anything?
          ∧/b:⍬                                     ⍝ Accept user decision
          b←~b
          maxSize←600 960                           ⍝ Define the max size
          isSize←n.∆Form.Size                       ⍝ Current (default) size
          (b/n.∆Form.Size)←b/maxSize⌊isSize         ⍝ Adjust the size
          pl←↑¨⍴¨parms.posn
          0∧.≠pl:⍬                                  ⍝ Did the user specify "Posn" fully? Done!
          ndp←n.∆Form.Posn+⌊0.5×n.∆Form.Size        ⍝ New default position
          n.∆Form.Posn←ndp{0∊⍴⍵:⍺ ⋄ ⍵}¨parms.posn   ⍝ Set Posn but accept user definition
          ⍬
      }

    ∇ n←RestorePosnAndSizeFromRegistry n;read;bool;v
      :If ~0∊⍴n.∆parms.regKey2
      :AndIf ¯1≢n.∆parms.regKey2
      :AndIf n.∆globalParms{(0=⍺.⎕NC ⍵):0 ⋄ ~0∊⍴⍺.⍎⍵}'regKey'
          read←{11::'' ⋄ RefToWinRegSimple.Read ⍵}
      :AndIf 0=+/0∊¨⍴¨v←{read(GetRegPath globalParms.regKey parms.regKey2),'\',⍵}¨'Posn' 'Size'
          v←{↑(//)⎕VFI ⍵}¨v
      :AndIf ~¯1∊×1⊃v
          :If ∨/bool←0∊¨⍴¨n.∆parms.posn
              n.∆Form.Posn[bool/⍳2]←bool/0⊃v
          :EndIf
          :If ∨/bool←0∊¨⍴¨n.∆parms.size
              n.∆Form.Size[bool/⍳2]←bool/1⊃v
          :EndIf
      :EndIf
    ∇

:EndClass
