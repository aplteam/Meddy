:Class APLGuiHelpers
⍝ Contains methods that might be helpful for any APLGui related stuff.
    ⎕IO←0 ⋄  ⎕ml←3

    ∇ {r}←form1 CenterIn form2;sc;ps;pp;np;buf;max;mi;ss;ss2;narnp
    ⍝ Centers `form1` in `form2` which are both supposed to be refs
    ⍝ pointing to controls, typically forms. If `form2` is empty we
    ⍝ leave it to Windows to calculate the appropriate Posn.
    ⍝ Returns always an empty vector.
      :Access Public Shared
      r←⍬
      :If ~0∊⍴form2
          :If 'Namespace'≡form2.⎕WG'Type'       ⍝ When a Form is a Namespace right now
              :Return
          :EndIf
          :Trap 6
              sc←form2.Coord                    ⍝ Save coordinates
          :Else
              :Return                           ⍝ Has probably ceased to exist by now
          :EndTrap
          form2.Coord←'Pixel'                   ⍝ Enforce Pixel
          (pp ps)←form2.(Posn Size)             ⍝ Posn & Size of "parent" window.
          form2.Coord←sc                        ⍝ Set Coord back to what it was
          np←pp
          np+←⌈0.5×ps-form1.Size                ⍝ Center it.
          buf←40 10+2↑##.APLGuiUtils.RefToWinSys.(GetSystemMetrics SM_CYMENU)   ⍝ buf; used to force the Dlg away from the brim.
          max←0⌈⌊ScreenEstate-form1.Size+buf    ⍝ Calc max value.
          np←buf⌈np⌊max                         ⍝ Calc result.
          form1.Posn←np
      :EndIf
    ∇

    ∇ {r}←SavePosnAndSizeInRegistry n;rk
    ⍝ Saves `Posn` and `Size` of `form` to the Windows Registry as key `rk`.\\
    ⍝ Does not do anything in case rk is empty.
      :Access Public Shared
      r←⍬
      rk←##.APLGuiUtils.GetWinRegKeyForForm n.(∆globalParms ∆parms)
      :If ~0∊⍴rk
          ##.APLGuiUtils.RefToWinRegSimple.Write(rk,'\Posn')(⍕n.∆Form.Posn)
          ##.APLGuiUtils.RefToWinRegSimple.Write(rk,'\Size')(⍕n.∆Form.Size-(##.APLGuiUtils.GetMenubarHeight n),0)
      :EndIf
    ∇

    ∇ n←CreateStatusbar n;∆;globalParms;parms
    ⍝ Takes a namespace with references as left argument and adds a status
    ⍝ bar to it with the fixed name `Statusbar`. That namespace is also
    ⍝ returned as result.\\
    ⍝ The right argument must be a parameter namespace. Only if
    ⍝ the `hasStatusbar` property is 1 is a status bar actually added.
      :Access Public Shared
      (globalParms parms)←n.(∆globalParms ∆parms)
      :If ⊃parms.hasStatusbar
          n.Statusbar←n.∆Form.⎕NEW'Statusbar'(,⊂'Attach'('Bottom' 'Left' 'Bottom' 'Right'))
          n.Statusbar.⎕DF'[Statusbar]:Statusbar'
          n.Statusbar.Coord←'Pixel'
          n.Statusbar.Posn[0]-←4
          n.Statusbar.Size[0]+←4
          ∆←''
          ∆,←⊂'Coord' 'Prop'
          ∆,←⊂'Size'(⍬ 100)
          ∆,←⊂'Attach'('Top' 'Left' 'Top' 'Right')
          ∆,←⊂'Text'parms.statusbarMessage
          n.StatusField1←n.Statusbar.⎕NEW'StatusField'∆
          n.StatusField1.⎕DF'[StatusField]:StatusField1'
          n.StatusField1.Coord←'Pixel'
          n.StatusField1.Size[0]+←3
          n.StatusField1.Size[1]-←1+2×1⊃n.StatusField1.Posn
      :AndIf 0<parms.⎕NC'hasVersionField'
      :AndIf ⊃parms.hasVersionField
          n.Statusbar.Coord←'Pixel'
          n.StatusField1.Coord←'Pixel'
          n.StatusField1.Size[1]-←63
          ∆←''
          ∆,←⊂'Coord' 'Pixel'
          ∆,←⊂'Size'(⍬ 55)
          ∆,←⊂'Attach'(4⍴'Top' 'Right')
          n.VersionNo←n.Statusbar.⎕NEW'StatusField'∆
          n.VersionNo.Posn←n.StatusField1.Posn[0],1↓n.VersionNo.Posn
          n.VersionNo.Size←n.StatusField1.Size[0],n.VersionNo.Size[1]
          n.VersionNo.⎕DF'[StatusField]:VersionNo'
      :EndIf
    ∇

    ∇ n←CreateProgressbar n;parms;∆;globalParms
    ⍝ Takes a namespace with references and adds a progress bar with the
    ⍝ fixed name `Progressbar`. That namespace is also returned as result.\\
    ⍝ The right argument must be the parameter namespace of a Form. Only if
    ⍝ both, the `hasStatusbar` and the `hasProgressbar` property are 1 is
    ⍝ a progress bar actually added.
      :Access Public Shared
      (globalParms parms)←n.(∆globalParms ∆parms)
      :If 0<parms.⎕NC'hasProgressbar'
      :AndIf parms.hasProgressbar
          :If parms.hasStatusbar
              ∆←''
              ∆,←⊂'Coord' 'Prop'
              ∆,←⊂'Posn'(0 0)
              ∆,←⊂'Size'(100 100)
              ∆,←⊂'ProgressStyle' 'Smooth'
              ∆,←⊂'Visible' 0
              ∆,←⊂'Attach'('Bottom' 'Left' 'Bottom' 'Right')
              n.Progressbar←n.Statusbar.⎕NEW'Progressbar'∆
              n.Progressbar.⎕DF'[Progressbar]:Progressbar'
              n.Progressbar.Coord←'Pixel'
              n.Progressbar.Posn+←2 0
              n.Progressbar.Size-←4 0
          :Else
              'You cannot have a progress bar without a status bar'⎕SIGNAL ##.APLGuiUtils.APLGuiError
          :EndIf
      :EndIf
    ∇

    ∇ r←ScreenEstate;ss;mi
      :Access Public Shared
      ss←##.APLGuiUtils.RefToWinSys.(GetSystemMetrics¨SM_CYFULLSCREEN SM_CXFULLSCREEN)  ⍝ Real height & width of main screen
      mi←MonitorInfo                      ⍝ Physical size of all screens
      r←(ss[0]⌊mi[2]),(ss[1]⌈mi[3])       ⍝ Best of both, ss and mi
    ∇

    ∇ r←MonitorEstate;ff
      :Access Public Shared
      'ff'⎕WC'Form'('Coord' 'Prop')('Posn'(0 0))('Size'(100 100))('Visible' 0)
      ff.Coord←'Pixel'
      r←ff.Size
    ∇

    ∇ r←MonitorInfo
      :Access Public Shared
    ⍝ Gives valuable information about current monitor(s):
    ⍝ | R[1+2] | Top-left corner of the virtual desktop.
    ⍝ | R[3+4] | Size of the  virtual desktop.
    ⍝ | R[5]   | Number of monitors.
    ⍝ | R[6]   | Flag; is true if all monitors have the same display format.
      r←##.APLGuiUtils.RefToWinSys.(GetSystemMetrics¨SM_YVIRTUALSCREEN SM_XVIRTUALSCREEN SM_CYVIRTUALSCREEN SM_CXVIRTUALSCREEN SM_CMONITORS SM_SAMEDISPLAYFORMAT)
    ∇

:EndClass
