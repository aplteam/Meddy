:Class SelectionTool
⍝ This is the base class of `OptionsTool` and `ProcessTool`.

    :Include APLGuiUtils
    :Include SelAndProcess

    ⎕IO←0 ⋄ ⎕ML←3

    :Field Shared Public ReadOnly RefreshEvent←9999
    :Field Shared Public ReadOnly QuitEvent←9998

    ∇ r←ListHelpers
      :Access Public Shared
      r←↑'Run' ''
    ∇

    ∇ (okFlag bool)←{x}Run list;n
      :Access Public Shared
    ⍝ Creates the GUI & hands over control to the user (modal call).\\
    ⍝ `okFlag` is 1 for the "OK" button and 0 otherwise.\\
    ⍝ `bool` is a vector with 1 for selected items.
      :If 0=⎕NC'x'
          n←Create list
      :Else
          n←x Create list
      :EndIf
      (okFlag bool)←ModalWait n
    ∇

    ∇ n←{x}Create list;∆;parms;globalParms;parms2;parmsMenubar
    ⍝ Takes one parameter:\\
    ⍝ `⍵`: `list` is a vector of text vectors (vtv). This is the list.\\
    ⍝ '⍺': `x` is optional and may contain zero, one or both of:\\
    ⍝ For `globalParms` see `#.AppleGuiParms.CreateDefaults`.\\
    ⍝ `parms` is typically created via `CreateParms`.\\
    ⍝ Returns a namespace with references to all the controls created. The
    ⍝ form lives as long as that namespace exists if no other refs were
    ⍝ created later.
      :Access Public Shared
      'Right argument must not be empty'⎕SIGNAL 11/⍨0=≢list
      x←{(0<⎕NC ⍵):⍎⍵ ⋄ ⍬}'x'
      (globalParms parms)←CreateParms GetParms x
      parms←CheckParmsForProgressbarAndStatusbar parms
      'Invalid: style'⎕SIGNAL APLGuiError/⍨~(⊂⎕C parms.style)∊##.Enums.SelectionStyles.⎕NL-3
      parms←CheckParms parms
      parms2←CopyNamespace parms
      parms2.(sysMenu maxButton minButton sizeable)←1
      parms2.parmType←'StdForm'
      n←##.StdForm.Create globalParms parms2
      n.∆Form.⎕WS'Event'QuitEvent 1
      n.∆Form.onClose←'OnClose'
      parmsMenubar←##.Menubar.CreateParms
      parmsMenubar.noDevelopersMenu←1
      n.menubar←##.Menubar.Create n.∆Form(GetListMenu GetMultipleFlag parms)parmsMenubar(⎕NEW ##.KeyCodes)
      n.menubar.⎕DF'[Menu namespace]'
      n(CreateInfo)←⊃parms.info
      n←##.StdForm.AddButtons(n(parms.(okBtnCaption cancelBtnCaption)))
      n.Btn_00.Default←1
      n.Btn_01.Cancel←1
      n.∆buttons.onSelect←⊂'OnButtonPressed'
      n(CreateList)←parms list
      n←CreateProgressbarTimerAndMessage n
      n(CreateAutoPressTimer)←parms.timeout
      ⎕NQ n.List RefreshEvent
      {}AdjustSizeAndPosn n
      n.∆Form ##.APLGuiHelpers.CenterIn globalParms.centerIn{0=≢⍵:⍺ ⋄ ⍵}parms.centerIn
      {}CheckPosition n.∆Form
      n.∆result←(≢n.∆origOrder)⍴0
     ⍝Done
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Returns a parameter namespace with default settings.
    ⍝ | Parameter name     | Comments |
    ⍝ |-|-|
    ⍝ | `addToCaption`     | Together with the "caption" this is used to compile the caption|
    ⍝ | `alignButtons`     | Defaults to `##.Enums.Align.Left`. Can be "center" or "right" instead. Overwrites global parameter if not empty.|
    ⍝ | `autoPress`        | Defines the button that is clicked in test mode (`0`=OK, `1`=Cancel, `3`=Help, `¯1`=no button at all).|
    ⍝ | `cancelBtnCaption` | Caption of the "Cancel" (default) button.|
    ⍝ | `caption`          | This overwrites any setting of "caption" in the global parameter set.|
    ⍝ | `checkboxes`       | Shall the user be forced/enabled to select with check boxes?|
    ⍝ | `centerIn`         | A form the new form shall be centered in.|
    ⍝ | `colTtitles`       | A vector of strings with the column titles. By default there are no column titles.|
    ⍝ | `default`          | Which items shall be preselected from the start. Boolean or Integer(s).|
    ⍝ | `destroyAutoPressTimerHotKey` | Which key allows the user to stop the timer. Defaults to F12|
    ⍝ | `fontAPL`          | Font to be used for displaying APL code.|
    ⍝ | `fontInput`        | Font to be used for any input field.|
    ⍝ | `fontLabel`        | Font to be used for lables.|
    ⍝ | `fontStandard`     | Font to be used for any other purposes than "fontAPL", "fontInput" and "fontLabel".|
    ⍝ | `hasStatusbar`     |Boolean that decides whether the form will have a status bar or not. Defaults to 1.|
    ⍝ | `hasVersionField`  | Reserve a field in the bottom right corner for version info.|
    ⍝ | `hGap`             | Horizontal gap. Defaults to the value of `hGap` in the global parameter space.|
    ⍝ | `icon`             | Default is an empty vector. Might become either an icon object or a `*.ico` filename. The latter one must be prefixed by "file:///".|
    ⍝ | `info`             | If specified this string is shown above the list.|
    ⍝ | `initialVgap`      | The space between the top border of the Form and the first control. Defaults to 3 times the vGap.|
    ⍝ | `minSize`          | Defaults to 200 300. Use this to specify the minimum size of the resulting Form. If controls demand a bigger size anyway, `minSize` has no effect.|
    ⍝ | `okBtnCaption`     | Caption of the "OK" (default) button.|
    ⍝ | `parent`           | If specified this must point to a form that will be the parent of the dialog to be created.|
    ⍝ | `parmType`         | Is "SelectionTool"; defines the type of this parameter space.|
    ⍝ | `posn`             | Posn of the form.|
    ⍝ | `regKey2`          | If this is non-empty it it used to save "Posn" & "Size" for the Form. Set to `¯1` if `regKey2` should become `addToCaption`. `''` means: don't save (default).|
    ⍝ | `savePosnAndSizeInRegistry` | Boolean that defaults to 1: save "Posn" & "Size" in the Windows Registry.|
    ⍝ | `size`             | Size of the form.|
    ⍝ | `sortByCol`        | Allow (1) or disallow (0) sorting by a click on a/the col title.|
    ⍝ | `statusbarMessage` | If you want an initial message in the status bar set this.|
    ⍝ | `style`            | How many rows may the user select: "single" or "multi". Set to "multi" in case checkboxes=1.|
    ⍝ | `testMode`         | Defaults to `¯1`. This will become `globals.testmode` if its not overwritten.|
    ⍝ | `timeout`          | Boolean that defaults to 0. 1 means that the "autoPress" button is "pressed" after "timeout" seconds.|
    ⍝ | `useWindowsRegistry` | If this is one then "Posn" & "Size" are saved/loaded in/from the Windows Registry.|
    ⍝ | `vGap`             | Vertical gap. Defaults to the value of `vGap` in the global parameter space.|
      r←##.APLGuiParameterSpace.Create
      r.addToCaption←''
      r.alignButtons←##.Enums.Align.Left
      r.autoPress←¯1
      r.cancelBtnCaption←'Cancel'
      r.caption←''
      r.centerIn←''
      r.checkboxes←0
      r.colTitles←''
      r.default←¯1
      r.destroyAutoPressTimerHotKey←'F12'
      r.(fontAPL fontInput fontLabel fontStandard)←⊂''
      r.hasStatusbar←1
      r.hasProgressbar←1
      r.hasVersionField←0
      r.hGap←¯1
      r.icon←''
      r.info←''
      r.initialVgap←¯1
      r.minSize←200 300
      r.okBtnCaption←'OK'
      r.parent←''
      r.parmType←'SelectionTool'
      r.posn←⍬ ⍬
      r.regKey2←''
      r.savePosnAndSizeInRegistry←1
      r.size←⍬ ⍬
      r.sortByCol←1
      r.statusbarMessage←''
      r.style←##.Enums.SelectionStyles.single
      r.testMode←¯1
      r.timeout←0
      r.useWindowsRegistry←0
      r.vGap←¯1
     ⍝Done
    ∇

    ∇ (okFlag boolean)←ModalWait n
    ⍝ Takes a ref pointing to a form created by this class.\\
    ⍝ Returns:\\
    ⍝ * `okFlag` : 1 in case the "OK" button was pressed and 0 otherwise.
    ⍝ * `boolean` : a vector of Booleans representing the selection.
    ⍝
    ⍝   `0=+/boolean` holds true in case `okFlag` is 0.
      :Access Public Shared
      okFlag←0 ⋄ boolean←(≢n.List.Items)⍴0
      {}⎕NQ n.List'GotFocus' ⋄ ⎕DQ n.∆Form
      :If 0=n.∆Form.∆closed
          :If 0=n.⎕NC'∆buttonPressed' ⍝ If true then it was a double-click.
          :OrIf n.∆buttonPressed.Default
              okFlag←1
              :If n.List.CheckBoxes
                  boolean←{12⊃⌽(32⍴2)⊤n.List.GetItemState ⍵}¨⍳≢n.List.Items
              :Else
                  boolean←n.List.SelItems
              :EndIf
          :EndIf
          n.∆CloseForm
      :EndIf
    ∇

⍝⍝⍝⍝ Private stuff

      OnKeyPressInList←{
          keys←⍺
          _←⎕NQ(0⊃⍵)RefreshEvent
          (rf val key shiftState)←⍵[0 2 4 5]
          (~key∊keys.all~keys.enter):1
          (key=keys.home):0⊣GoToHome rf shiftState
          (key=keys.end):0⊣GoToEnd rf shiftState
          (key=keys.cursorUp):rf AddLines ¯1 shiftState
          (key=keys.cursorDown):rf AddLines 1 shiftState
          (key=keys.blank):ToggleCurrentItem rf
          . ⍝ Huuh?!
      }

    ∇ r←n OnRefreshEvent msg;sh;no;rf
      ⍝ Refresh selection info in the status bar
      rf←n.List
      sh←≢rf.Items
      r←⍬
      :If rf.CheckBoxes
          no←+/12⊃¨rf GetItemState¨⍳sh
      :ElseIf rf.Style≡'Multi'
          no←+/rf.SelItems
      :Else
          :Return
      :EndIf
      :If 0=no
          :If 1=sh
              n.StatusField1.Text←'None is selected'
          :Else
              n.StatusField1.Text←'None of ',(⍕sh),' items are selected'
          :EndIf
      :ElseIf no=1
          n.StatusField1.Text←'1 item of ',(⍕sh),' is selected'
      :ElseIf sh=no
          n.StatusField1.Text←'All ',(⍕sh),' items are selected'
      :Else
          n.StatusField1.Text←(⍕no),' item',((1<no)/'s'),' of ',(⍕sh)
          n.StatusField1.Text,←((1<no)⊃,' is' ' are'),' selected'
      :EndIf
    ∇

    ∇ n←n CreateList(parms list);∆;posn;_;ind
      ∆←''
      posn←(GetPosnOfList parms)
      ∆,←⊂'Posn'posn
      ∆,←⊂'Attach'('Top' 'Left' 'Bottom' 'Right')
      ∆,←⊂'GridLines' 1
      ∆,←⊂'FullRowSelect' 1
      ∆,←⊂'DragItems' 0
      ∆,←⊂'View' 'Report'
      :If 2=⍴⍴list
          ∆,←⊂'Items'(list[;0])
          ∆,←⊂'ReportInfo'((1↓[1]list),⊂'')
      :Else
          ∆,←⊂'Items'list
          ∆,←⊂'ReportInfo'(((≢list),1)⍴'')
      :EndIf
      :If 0≠≢parms.colTitles
          ∆,←{(0≠≢⍵)/⊂'ColTitles'(⍵,⊂'')}parms.colTitles
      :Else
          ∆,←⊂'Header' 0
      :EndIf
      ∆,←⊂'Size'(CalcSizeOfListView n posn)
      ∆,←⊂'CheckBoxes'parms.checkboxes
      :If parms.checkboxes
          ∆,←⊂'Style' 'Single'   ⍝ Prevent confusion between check boxes & SelItems
      :Else
          ∆,←⊂'Style'parms.style
      :EndIf
      ∆,←⊂'Font'(n GetParm ##.Enums.Fonts.Input)
      n.List←n.∆Form.⎕NEW'ListView'∆
      n.List.Event←RefreshEvent'OnRefreshEvent'n
      :If GetMultipleFlag parms
          n.List.onKeyPress←'OnKeyPressInList'(GetSpecialKeys ⍬)
      :EndIf
      n.List.onItemUp←'OnItemUpInList'
      :If 2=⍴⍴list
          _←{n.List.SetColSize ⍵ ¯3}¨⍳1⊃⍴list
          _←n.List.SetColSize(1⊃⍴list)0
      :Else
          _←{n.List.SetColSize ⍵ ¯3}¨0 1
      :EndIf
      :If n.List.CheckBoxes
          :If {(0=≢⍵):0 ⋄ 0<+/⍵}ind←parms.default
              :If 0≠≢ind←1+⍸ind
                  {n.List.SetItemState ⍵ 4096}¨ind
                  n.List.SelItems[0]←1
                  {}SetFocusTo n.List(¯1↑⍸parms.default)
              :EndIf
          :EndIf
      :Else
          :If ¯1≡parms.default
              n.List.SelItems←(≢n.List.SelItems)↑1
          :Else
              n.List.SelItems←parms.default
          :EndIf
      :EndIf
      :If 'single'≡parms.style
      :AndIf 0=parms.checkboxes
          n.List.onItemDblClick←1
      :EndIf
      {}SetFocusTo n.List(¯1↑⍸parms.default)
      n.menubar.adjustHeight.onSelect←'OnAdjustHeight'n
      :If parms.sortByCol
          n.List.onColumnClick←'OnColumnClick'
          n.List.∆orderedBy←¯1 0  ⍝ [0]=Column no, [2]=sort direction: 1 is up, ¯1 is down
      :EndIf
      :If GetMultipleFlag parms
          n.menubar.selectAll.onSelect←'OnSelectAll'n
          n.menubar.selectNone.onSelect←'OnSelectNone'n
          n.menubar.invertSelection.onSelect←'OnInvertSelection'n
      :EndIf
      n.∆origOrder←⍳0⊃⍴list
    ∇

    ∇ r←GoToHome(rf ss);_;b;f;sh;ci
      r←⍬
      f←NeedsSelectionToBeEnhanced rf ss
      sh←≢rf.Items
      :If rf.CheckBoxes
          :If f
              ci←GetCurrentItemNo rf
              b←⊃rf GetItemState¨⍳ci+1
              b[;12]←1
              (⍳1+ci){rf.SetItemState ⍺ ⍵}¨Power2¨↓b
              {}SetFocusTo rf 1
              rf.SelItems←sh↑1
          :Else
              rf.SelItems←sh↑1
              b←rf GetItemState 1
              b[0]←0
              _←rf.SetItemState 1(Power2 b)
          :EndIf
      :Else
          :If f
              rf.SelItems∨←sh↑(GetCurrentItemNo rf)⍴1
          :Else
              _←rf.SelItems{⍵↑⍨≢⍺}←1
          :EndIf
      :EndIf
      {}SetFocusTo rf 0
    ∇

    ∇ r←GoToEnd(rf ss);_;f;sh;ci;b;ind
      r←⍬
      f←NeedsSelectionToBeEnhanced rf ss
      sh←≢rf.Items
      :If rf.CheckBoxes
          :If f
              ci←GetCurrentItemNo rf
              b←⊃rf GetItemState¨ind←ci+⍳(≢rf.Items)-ci
              b[;12]←1
              ind{rf.SetItemState ⍺ ⍵}¨Power2¨↓b
          :Else
          :EndIf
          {}SetFocusTo rf(sh-1)
          rf.SelItems←(-sh)↑1
      :Else
          :If f
              rf.SelItems←~sh↑(GetCurrentItemNo rf)⍴1
          :Else
              _←rf.SelItems{⍵↑⍨-≢⍺}←1
          :EndIf
      :EndIf
      {}SetFocusTo rf(sh-1)
    ∇

    ∇ {r}←rf AddLines(ci ss);f;in;sh;new;b;state    ⍝ Current Item, Shift State
    ⍝ rf: ref to the ListView control
      r←0
      :If (0=rf.CheckBoxes)∧1=ss
          f←NeedsSelectionToBeEnhanced rf ss        ⍝ Flag: does current selection need to be extended?
          in←GetCurrentItemNo rf                    ⍝ Item number
          sh←≢rf.Items
          new←(¯1=ci)⌈(sh-1+1=ci)⌊in
          :If f
              :If ¯1=ci
                  rf.SelItems[new]←0
              :EndIf
          :Else
              rf.SelItems←sh⍴0
              rf.SelItems[new+ci]←1
              {}SetFocusTo rf(new+ci)
          :EndIf
      :Else
          r←1
      :EndIf
    ∇

      GetMultipleFlag←{
          parms←⍵ ⋄ ('multi'≡parms.style)∨parms.checkboxes
      }

    ∇ r←GetListMenu multipleFlag;this
      r←''
      r,←⊂'[Edit]                       {edit}'
      this←⍕⎕THIS
     ⍝r,←⊂' Copy list=Ctrl+C            {copyList}          ;Copies the complete list'
     ⍝r,←⊂' ~Copy table=Ctrl+Shift+C    {copyTable}         ;Copies the complete table'
      :If multipleFlag
     ⍝    r,←⊂' -'
          r,←⊂' Select all=Ctrl+A           {selectAll}         ;Select all items'
          r,←⊂' Select none=Ctrl+N          {selectNone}        ;De-select all items'
          r,←⊂' Invert selection=Ctrl+I     {invertSelection}   ;Invert the selection'
          r,←⊂' -'
      :EndIf
      r,←⊂' Adjust height=F8            {adjustHeight}      ;Enlarges the form to what''s needed'
    ∇

      NeedsSelectionToBeEnhanced←{
     ⍝ Returns flag, 1 meaning that the current selection needs extension
          (rf ss)←⍵             ⍝ Ref to ListView, Shift State
          (1≠ss):0
          rf.CheckBoxes:1
          rf.Style≡'Multi'
      }

      OnButtonPressed←{
          n←GetRefTo_n 0⊃⍵
          n.∆buttonPressed←0⊃⍵
          n.∆result←{(⍳≢⍵)∊(GetSelection n)/⍵}n.∆origOrder
          ⍬⊣⎕NQ n.∆Form QuitEvent
      }

    ∇ n←n CreateAutoPressTimer timeout
⍝      :Access Public Shared
      :If 0<timeout
          n←n CreateAutoPressTimer_ timeout
      :EndIf
    ∇

:EndClass
