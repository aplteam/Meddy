:Class IE
⍝ Creates an Internet Explorer (IE) ActiveX control as child of a given parent.\\
⍝ Useful to display something like README.HTML or even a vector of text vectors
⍝ being HTML.\\
⍝ Note that starting from version 17.1 it is recommended to use the HTMLRenderer object
⍝ instead due to the many issues the WebBrowser controls causes like producing every
⍝ now and then a DOMAIN ERROR for no apparent reason.
⍝ ## The "BeforeNavigate" event
⍝ By default this event is handled by IE itself. It will redirect any http:// or
⍝ https:// requests to the default browser unless `redirectHttpToDefaultBrowser` is 0.\\
⍝ You can however define your own handler for this by setting `onBeforeNavigate` to
⍝ a fully qualified function name.\\
⍝ Such a function must be dyadic: the `n` namespace will be provided as left arugment
⍝ while the event message will be provided as right argument.\\
⍝ Such a function must return a Boolean result. A 1 allows the current request to go
⍝ through while a 0 stops it. Note that in case you decide to redirect the request
⍝ to, say, the default browser, or to suppress the request or show something else
⍝ instead you **must** call `(msg[⎕IO]).Stop` first inside your own function to make that
⍝ work.\\
⍝ You can use the methods `ShowHTML` and `ShowHtmlFile` from `IE` or `APLTreeUtils2.GoToWebPage`
⍝ inside your user-defined function.\\
⍝ ## Rending engine
⍝ The capabilities of the underlying default engine is quite limited because by default the
⍝ WebBrowser control uses the oldest Internet Explorer it can find on any given machine.
⍝ However, with the correct <meta> specfication you enforce the wrapper to use a
⍝ much later engine, even Edge (2016-01):
⍝ ~~~
⍝ <meta http-equiv="X-UA-Compatible" content="IE=edge" />'
⍝ ~~~
⍝ Note that this must be the **first** meta tag in order to work.
⍝ ## Temp file
⍝ The control needs to use a temporary file in order to put any HTML on display because using
⍝ the "memory-only" approach prevents the context menu from popping up. The name of the
⍝ temporary file is saved on the name `∆Filename` within the WebBrowser control object.\\
⍝ Since this object has no "Close" event it cannot delete the file itself, therefore you as
⍝ the user must do this.
⍝ ## Misc
⍝ The name of the ActiveX control is "Microsoft Web Browser".\\
⍝ [Documentation on MSDN](https://msdn.microsoft.com/en-us/library/aa752040(v=vs.85).aspx)\\
⍝ Author: Kai Jaeger ⋄ Copyright: APL Team Ltd

    :Include APLGuiUtils

    ⎕IO←0 ⋄ ⎕ML←3

    ∇ r←Version
      :Access Public Shared
      r←'IE' '0.1.1' '2019-09-27'
    ∇

    ∇ r←CreateParms
      :Access Public Shared
    ⍝ Returns a parameter namespace with default settings.
      r←##.APLGuiParameterSpace.Create
      r.onBeforeNavigate←''
      r.redirectHttpToDefaultBrowser←1
    ⍝ Done
    ∇

    ∇ {n}←{parms}CreateIE container;∆
    ⍝ Creates an OCXClass control with the name `IEobject` within `container`.\\
    ⍝ The WebBrowser control itself is going to have the name:  `IEobject_`.
      :Access Public Shared
      parms←{0=⎕NC ⍵:CreateParms ⋄ ⍎⍵}'parms'
      n←⎕NS''
      n.IEobject_←'IEobject_'container.⎕WC'OCXClass' 'Microsoft Web Browser'
      ∆←⊂'IEobject_'
      ∆,←⊂'Coord' 'Prop'
      ∆,←⊂'Size' 0 0             ⍝ Without this trick the browser area would not show an egg timer
      ∆,←⊂'Posn' 0 0
      ∆,←⊂'QueueEvents' 1        ⍝ Otherwise "OnNavigate2" cannot stop the WebBrowser!
      ∆,←⊂'Silent' 1
      'IEobject'container.⎕WC ∆
      n.IEobject←container⍎'IEobject'
      n.IEobject.onClose←'{.}'
      {}n.IEobject{6::⍬ ⋄ _←⍺.Navigate⊂⍵}'about:blank'
      {}n.IEobject{6::⍬ ⋄ _←⍺.Document.Close}⍬
      n.IEobject.∆parms←parms
      n.IEobject.n←n
      n.IEobject.onBeforeNavigate←(⍕⎕THIS),'.OnBeforeNavigate'
      n.∆container←container
      n.∆container.n←n
      ShowHtml n.IEobject(⊂'<p></p>')
      ⎕DL 0.25  ⍝ It sometimes needs a moment to establish itself.
    ⍝ Done
    ∇


    ∇ {r}←OnBeforeNavigate msg;n;url;self;page;fns;was
      :Access Public Shared
    ⍝ Handler for "BeforeNavigate" events in the WebBrowser ActiveX control.
    ⍝ Calls the user defined handler specified on `onBeforeNavigate` (if any) and
    ⍝ performs standard actions otherwise.\\
    ⍝ The standard action is to stop any requests that are http of https requests
    ⍝ and redirect them to the default browser on the current machine and let
    ⍝ everything else through.
      (self url)←msg[0 2]
      self.onNavigateComplete←0  ⍝ We switch this off just in case
      n←self.n
      :If IsHTTP_Request url
      :AndIf n.IEobject.∆parms.redirectHttpToDefaultBrowser
          was←n.IEobject.LocationURL
          self.Stop
          GoToWebPage url
          r←0
      :Else
          :If 0≠≢n.IEobject.∆parms.onBeforeNavigate
              :If 3=⎕NC n.IEobject.∆parms.onBeforeNavigate
                  r←⍎'n ',n.IEobject.∆parms.onBeforeNavigate,' msg'
              :ElseIf 3=(↑⎕RSI).⎕NC n.IEobject.∆parms.onBeforeNavigate
                  r←⍎'n ',((↑⎕NSI),'.'),n.IEobject.∆parms.onBeforeNavigate,' msg'
              :Else
                  r←'about:blank'≡url
              :EndIf
          :EndIf
      :EndIf
    ∇

    ∇ {r}←Navigate(ref url);n;was
      :Access Public Shared
    ⍝ You **must** use this method in order to display a page on the Internet (or any
    ⍝ Intranet for that matter) because otherwise, depending on the parameters, it might
    ⍝ not work! Note that this method displays anything, not matter what the parameter
    ⍝ `redirectHttpToDefaultBrowser` is telling. If you want to view a certain url in your
    ⍝ default browser then use `APLTreeUtils2.GoToWebPage` instead.\\
    ⍝ * `ref` must point to the WebBrowser control.
    ⍝ * `url` is what you want to view.
      ref.onBeforeNavigate←0  ⍝ We switch this off for the moment.
      ref.onNavigateComplete←(⍕⎕THIS),'.OnNavigateComplete'
      ref.Navigate⊂url
    ∇

    ∇ r←OnNavigateComplete msg;self
      :Access Public Shared
    ⍝ The function is public only for technical reasons - please ignore.
      r←1
      self←↑msg
      self.onBeforeNavigate←(⍕⎕THIS),'.OnBeforeNavigate'
      ⎕DL 0.05
    ∇

    ∇ {r}←ShowHtml(ref html)
      :Access Public Shared
    ⍝ `ref` is a ref pointing to an IE ActiveX control.\\
    ⍝ `html` is one of:
    ⍝ * Empty vector
    ⍝ * Simple text vector with HTML
    ⍝ * Vector of  vectors with HTML
    ⍝
    ⍝ Returns the name of the tmep file used or ''
     
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
    ⍝ We don't do the (memory based) approach anymore because ⍝
    ⍝ a) Ctrl+F (Find) on a page does not work then           ⍝
    ⍝ b) The engine is IE11 or worse, NOT Edge!               ⍝
    ⍝      ref.browser.Document.close                         ⍝
    ⍝      ref.browser.Document.write⊂1↓↑,/(⎕UCS 13),¨html    ⍝
    ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
      :If 0=ref.⎕NC'∆Filename'
          ref.∆Filename←'html'RefToFilesAndDirs.GetTempFilename2''
      :EndIf
      (⊂,html)⎕NPUT ref.∆Filename 1
      ref.Navigate⊂'file:///',ref.∆Filename
      r←⍬
      ref.Size←100 100×0≠≢html
    ∇

    ∇ {r}←ShowHtmlFile(webBrowserControl filename)
      :Access Public Shared
    ⍝ `webBrowserControl` is the IE ActiveX control.
    ⍝ `filename` points to an HTML file.
    ⍝ must either contain a `:` or start with `\\` (UNC name).
    ⍝ Returns always `⍬`.
      'Invalid: "webBrowserControl"'⎕SIGNAL 11/⍨'HTML Document'≢webBrowserControl.⎕WG'Type'
      r←⍬
      filename←'file:///'{((⍺≢(≢⍺)↑⍵)/'file:///'),⍵}⎕C filename~'"'
      {}NavigateTo webBrowserControl filename
      webBrowserControl.Size←100 100
    ∇

    ∇ r←GetBody refToIE
      :Access Public Shared
    ⍝ Returns the <body> of the browser's HTML.\\
    ⍝ `refToIE` must point to an instance of the IE ActiveX control.\\
    ⍝ If something goes wrong an error is thrown.
      r←refToIE.Document.body.outerHTML
    ∇

    ∇ r←GetHTML refToIE
      :Access Public Shared
    ⍝ Returns the <html> of the browser.\\
    ⍝ `refToIE` must point to an instance of the IE ActiveX control.\\
    ⍝ If something goes wrong an empty vector is returned.
      :Trap 11 2
          r←refToIE.Document.documentElement.outerHTML
      :Else
          r←''
      :EndTrap
    ∇

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Private

      NavigateTo←{
          ⍺←2 4
          flags←⍺
          (ref url)←⍵
          6::⍬
          ref.Navigate url flags
      }

      IsHTTP_Request←{
          url←⍵
          ∨/∨/¨'http://' 'https://'⍷¨⊂∊url
      }

:EndClass
