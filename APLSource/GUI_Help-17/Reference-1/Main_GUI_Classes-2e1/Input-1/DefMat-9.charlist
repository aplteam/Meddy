# The definition matrix defMat

## Overview

The `Input` class needs a definition matrix that defines all the controls needed to achieve a
particular goal. The following statement takes advantage of the fact that there is an enumeration
"DefMatIndices" available that can be used to index into such a matrix.

~~~
          ⌽#.GUI.Enums.DefMatIndices.∆List
0 ControlName
1 Label
2 Default
3 DataType
4 Length
5 Active
6 Column
~~~

## The columns

Here every column is explained in detail.

#### 0: ControlName

The name the control will be assigned to within the →[*.N_Namespace | n namespace].

Notes:

* Names must be valid APL names. If not an error is signalled.
* Names must be unique within a definition matrix.
* Names must not start with a "`_`" character and a "`∆`" character: they are both reserved.


#### 1: Label

The label or caption the control is going to get. Note that the interpretation depends on context:
for some →[*.Data_types|data types], "Label" is just a label ("Character"). For some data types
("YesNo") it will become a caption. For some data types ("Character") the label will default to
"ControlName" (with underscores replaced by blanks) and for some data types ("ListView") an empty
"Label" means that there won't be any label at all.

#### 2: Default

The meaning depends on the context. For some →[*.Data_types|data types] "Default" will be used to
populate the associated control ("Character") while for others "Default" will be ignored ("Button").

#### 3: DataType

One of `→[*.Data_types|#.GUI.Enums.InputDataTypes]`.

#### 4: Length

This may be a one- or two-item vector. How that is interpreted depends on the data type.

###### "Edit"-based single-line data types

For all data types that stem from a single-line "Edit" field ("Character", "Numeric", "Currency",
"Spinner" "DropDown", "DropEdit") it can be a single item which defines both the length of the field 
(in characters) and the number of characters the user may enter.

If the size of the input field and the number of characters the user may enter are different then
you may specify a two-item vector. The first one defines the size of the input field and the second
one the number of characters the user may enter.

###### Multi-line data types

For these data types ("Notepad", "ListView") it must be a two-item vector. The first one defines
the number of rows, the second one the number of columns.

Note that the value `¯1` has a special meaning: it means that the number of rows/cols is defined by
other controls. Of course this makes sense only when...

* Tabs are used.
* The control is the last one on that tab.


###### Other data types

For most of the remaining data types ("YesNo" et al.) it is best to specify `0` because it means
that the control will get the required size automatically. For other data types ("Date", "Time",
...) it is ignored. while for "Image" it is interpreted as bits if not zero and has a length of two.

#### 5: Active

Boolean that defaults to 1. A 0 makes the control inactive.

#### 6: Column

Defines the column on which a control will appear. For details see →[*.Layout|Layout principles in `Input`]
