# Menubar

This class offers just two shared methods. It's not designed to be instantiated.
The `Menubar.CreateParms` function returns a parameter space designed to be fed to the `Create` function.'
The `Menubar.Create` function returns an →[*.N_Namespace|`n` namespace] that holds names to all the items created by that function:

* The menu bar itself with the fixed name "Menubar"
* All the menus
* All the menu items

The general idea is to define a menu as text: a vector of text vector. This is an example:

~~~
[&File]         : OnHandler {file}  ;
 Open=Ctrl+O    : OnHandler {open}  ; Specify an alias name between "{" and "}"
 New=Ctrl+N     : OnHandler {new}   ; Opens a new document
 ~Close         : →         {close} ; Close a document
 -
 &Quit=Alt+F4   : OnHandler {quit}  ; Quit the program
[&Edit]         : OnHandler {edit}  ;
 Show Clipboard : OnHandler {clip}  ; Opens a window+display the clipboard
[Sub Menu]      : OnHandler
 Cut=Ctrl+X     : OnHandler {cut}   ; Cut an already selected piece of text
 Copy=Ctrl+C    : OnHandler {copy}  ; Copies an already selected piece of text
 Paste=Ctrl+V   : OnHandler {paste} ; Paste the contents of the clipboard
 #Toggle	       :  OnToggle  {toggle}
~~~

## Notes:

* Indentation defines the level of nesting within the structure of the menu.
* Menu captions are enclosed by square brackets: [ ].
* A single `-` becomes a separator.
* The caption as such and its hot key (if any) are separated by a "=".
* The `~` character means "inactive".
* The `#` character means "checked".
* Callback names are separated from the caption by a colon.
* Callback names can be either fully or relatively named. Relatively named ones are expected to live in the namespace
  the `Menubar.Create` method was called from.
* An optional hint must be separated from the name by a semicolon.
  When `debug` is 1 and `noDevelopersMenu` is 0 then the user may select any callbacks from the menubar itself:<<BR>>
  there will be a menu "Developers" in such a case. However, depending on the circumstances the callbacks might not be 
  visible at that very moment but this is then indicated.

## Names

Any object must have the name, and that name is what you will find in the n namespace returned.
For separators the name is generated automatically for you.

For menus you may specify a name but if you don't then Menubar attempts to be clever and takes the caption (without
the shortcut if any). It then replaces blanks by `_` and finally adds `_Menu` to the end of the name.

Therefore for "Sub Menu" in the definition above the name `Sub_Menu_Menu` is used.
Apart from the principle method `Create` there are two more methods which are useful helpers: `Reformat` and `CreateParms`.

Notes:

* The name "Menubar" is reserved and must not be used for a menu item or a menu.
* The names for the controls must not contain either `⍙` or `∆`.
* Be careful with absolute path names for handlers: a callback addressed as `#.This.OnHandler` makes it impossible for that code
  to run successfully as a User Command; ever.

For implementation details execute:

~~~
     ]ADOC.Browse #.GUI.Menubar
~~~

What is →[*.ADOC]?
