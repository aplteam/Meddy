# IE - Internet Explorer
This class creates an instance of the Microsoft Internet Explorer ActiveX control for displaying HTML.

The purpose is not to rebuild a browser; it's rather about displaying "local" HTML, from a README.HTML to a group of
nested pages carrying links to each other.

## Overview

By default any link that starts with either "http" or "https" is handed over to the current default browser
while all other URLs are expected to be either...

* point to a particular HTML file ("file://" protocol).
* taken care of by the programmer from within his own callback which is associated with
  the "BeforeNavigate" event.

It is then up to the user to decide what to do. As usual the GUI_Demo namespace comes with an example of how that would look like.

This is controlled by the `redirectHttpToDefaultBrowser` parameter: a Boolean that defaults to 1. By setting this to 0 you can
allow any "http" and "https" requests to be displayed in the WebBrowser control.

IE is not a top-level control - it needs a parent like a Form or a SubForm. Therefore the 
→[*.IE.The_n_namespace | `n` namespace of the IE class] is different for the usual one.

## Rendering engine

By default the WebBrowser control uses the oldest Internet Explorer rendering engine available on any given machine.

However, this can be changed. The following `<meta>` tag makes sure that "Edge" is used as rendering engine:

~~~
<meta http-equiv="X-UA-Compatible" content="IE=edge" />'
~~~

Note that this meta tag **must be the very first one**!

## Limitations

A real limitation is that the object cannot be created with `⎕NEW` - that is a limitation of Dyalog APL.

It is however perfectly capable of displaying simple HTML files, something that occasionally can be quite handy.

## Dynamic HTML versus HTML files

You can either compile some HTML in the workspace (dynamic approach) or you can save your HTML in files. For the dynamic
approach call `IE.ShowHtml`, otherwise call `IE.ShowHtmlFile`. However, you are strongly advised to settle for one method
because mixing them can cause problems with links within your HTML code.

If you must mix both approaches then go for the dynamic approach and read the HTML files yourself and just pass the
HTML to the `IE.ShowHtml` method; that will work fine, and performance won't be bad.

Normally the dynamic approach is used for displaying a single file; a typical example is a ReadMe.html file.

If a dynamic HTML page contains links that do not point to an http or https URL then you have to take care of those links
yourself when the user clicks at them. For that you have two choices:

* Make sure that the URL uses the "file" protocol as in "file://C:/MyDir/MyFile.html".
* Specify a callback by setting the `onBeforeNavigate` parameter to a fully qualified name of a function that can deal
  with such a request. That allows you to interpret any links yourself.
  
## Show just a particular page on the Internet 

This can be achieved by performing these actions:

1. Use the `IE.Navigate` method to view that URL.
2. Specify your own handler for the `BeforeNavigate` event, call the WebBrowser's method `Stop` in it and return a 0
   for any follow-up links caused by user actions.

Note that the callback must accept a left and a right argument and must return a result:

* The left argument is the `n` namespace.
* The right argument is the standard message of the "BeforeNavigate" evenmt.
* The result must be a Boolean. A 0 means that the last user action (navigate to ...) is suppressed.

## Specialties

The name of the OCXClass object created is `IEobject`. The WebBrowser control is called `IEobject_.`
